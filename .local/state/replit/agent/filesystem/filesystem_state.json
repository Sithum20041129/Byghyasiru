{"file_contents":{"postcss.config.js":{"content":"export default {\n\tplugins: {\n\t\ttailwindcss: {},\n\t\tautoprefixer: {},\n\t},\n};","size_bytes":74},"replit.md":{"content":"# Overview\n\nA meal pre-order platform built with React that allows customers to order customizable meals from restaurants. The system supports different user roles (admin, customer, merchant) with features for meal customization, store management, and order processing. The platform focuses on Sri Lankan cuisine with configurable main dishes, curries, and portion sizes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with Vite for fast development and building\n- **Routing**: React Router DOM for single-page application navigation\n- **State Management**: Local storage for demo data persistence, React hooks for component state\n- **Styling**: Tailwind CSS with custom design system using CSS variables for theming\n- **UI Components**: Radix UI primitives for accessible, unstyled components with custom styling\n- **Animation**: Framer Motion for smooth transitions and interactions\n\n## Component Structure\n- **UI Library**: Custom component library built on Radix UI primitives\n- **Design System**: Consistent theming with light/dark mode support via CSS custom properties\n- **Utility Functions**: Class name merging utilities for conditional styling\n- **Toast System**: Custom toast notification system with state management\n\n## Data Management\n- **Demo Data**: Local storage-based user management with predefined roles\n- **Pricing Engine**: Configurable pricing system for meals, portions, and add-ons\n- **Meal Configuration**: Flexible meal composition with main dishes, vegetarian/non-vegetarian curries\n- **Store Settings**: Merchant-configurable pricing, availability, and business hours\n\n## User Role System\n- **Admin**: Platform administration and user approval\n- **Merchant**: Store management, menu configuration, order processing\n- **Customer**: Meal ordering and customization\n\n## Pricing Architecture\n- **Base Pricing**: Main meal prices by portion size (full, half, small)\n- **Add-on Pricing**: Extra charges for additional curries beyond free allowance\n- **Divisible Items**: Per-piece pricing for items like chicken and fish\n- **Non-divisible Items**: Fixed pricing with optional extra piece charges\n\n# External Dependencies\n\n## Core Frontend Dependencies\n- **React Ecosystem**: React 18.2.0, React DOM, React Router DOM for navigation\n- **Build Tools**: Vite for development server and building, PostCSS with Autoprefixer\n\n## UI and Styling\n- **Radix UI**: Complete suite of accessible UI primitives (dialogs, dropdowns, forms, etc.)\n- **Tailwind CSS**: Utility-first CSS framework with animations plugin\n- **Framer Motion**: Animation library for enhanced user interactions\n- **Lucide React**: Icon library for consistent iconography\n\n## Utility Libraries\n- **Class Variance Authority**: Type-safe component variants\n- **clsx & tailwind-merge**: Conditional class name utilities\n- **cmdk**: Command palette component\n- **UUID**: Unique identifier generation\n- **React Helmet**: Document head management\n\n## Development Tools\n- **Babel**: Code transformation and parsing tools\n- **ESLint**: Code linting with React-specific rules\n- **TypeScript Types**: Type definitions for Node.js and React\n- **Terser**: JavaScript minification for production builds\n\nNote: The application currently uses local storage for data persistence but is architected to easily integrate with backend services and databases for production deployment.","size_bytes":3454},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n        darkMode: ['class'],\n        content: [\n                './pages/**/*.{js,jsx}',\n                './components/**/*.{js,jsx}',\n                './app/**/*.{js,jsx}',\n                './src/**/*.{js,jsx}',\n        ],\n        theme: {\n                container: {\n                        center: true,\n                        padding: '2rem',\n                        screens: {\n                                '2xl': '1400px',\n                        },\n                },\n                extend: {\n                        fontFamily: {\n                                sans: [\"Inter\", \"ui-sans-serif\", \"system-ui\", \"sans-serif\"],\n                                inter: [\"Inter\", \"ui-sans-serif\", \"system-ui\", \"sans-serif\"],\n                        },\n                        colors: {\n                                border: 'hsl(var(--border))',\n                                input: 'hsl(var(--input))',\n                                ring: 'hsl(var(--ring))',\n                                background: 'hsl(var(--background))',\n                                foreground: 'hsl(var(--foreground))',\n                                primary: {\n                                        DEFAULT: 'hsl(var(--primary))',\n                                        foreground: 'hsl(var(--primary-foreground))',\n                                },\n                                secondary: {\n                                        DEFAULT: 'hsl(var(--secondary))',\n                                        foreground: 'hsl(var(--secondary-foreground))',\n                                },\n                                destructive: {\n                                        DEFAULT: 'hsl(var(--destructive))',\n                                        foreground: 'hsl(var(--destructive-foreground))',\n                                },\n                                muted: {\n                                        DEFAULT: 'hsl(var(--muted))',\n                                        foreground: 'hsl(var(--muted-foreground))',\n                                },\n                                accent: {\n                                        DEFAULT: 'hsl(var(--accent))',\n                                        foreground: 'hsl(var(--accent-foreground))',\n                                },\n                                popover: {\n                                        DEFAULT: 'hsl(var(--popover))',\n                                        foreground: 'hsl(var(--popover-foreground))',\n                                },\n                                card: {\n                                        DEFAULT: 'hsl(var(--card))',\n                                        foreground: 'hsl(var(--card-foreground))',\n                                },\n                        },\n                        borderRadius: {\n                                lg: 'var(--radius)',\n                                md: 'calc(var(--radius) - 2px)',\n                                sm: 'calc(var(--radius) - 4px)',\n                        },\n                        keyframes: {\n                                'accordion-down': {\n                                        from: { height: 0 },\n                                        to: { height: 'var(--radix-accordion-content-height)' },\n                                },\n                                'accordion-up': {\n                                        from: { height: 'var(--radix-accordion-content-height)' },\n                                        to: { height: 0 },\n                                },\n                        },\n                        animation: {\n                                'accordion-down': 'accordion-down 0.2s ease-out',\n                                'accordion-up': 'accordion-up 0.2s ease-out',\n                        },\n                },\n        },\n        plugins: [require('tailwindcss-animate')],\n};","size_bytes":3962},"vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n  },\n})\n","size_bytes":318},"src/App.jsx":{"content":"import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { MerchantConfigProvider } from \"@/store/merchantConfig\"; // ✅ import provider\n\n// Pages\nimport HomePage from \"@/pages/HomePage\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport RegisterPage from \"@/pages/RegisterPage\";\nimport CustomerDashboard from \"@/pages/CustomerDashboard\";\nimport MerchantDashboard from \"@/pages/MerchantDashboard\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport OrderPage from \"@/pages/OrderPage\";\nimport ReceiptPage from \"@/pages/ReceiptPage\";\nimport CustomizeMeal from \"@/pages/CustomizeMeal\";\n\n// Merchant tools\nimport MenuPricing from \"@/pages/Merchant/MenuPricing\";\nimport StoreSettings from \"@/pages/Merchant/StoreSettings\";\n\n// Routes\nconst AppRoutes = () => {\n  return (\n    <Routes>\n      {/* Public pages */}\n      <Route path=\"/\" element={<HomePage />} />\n      <Route path=\"/login\" element={<LoginPage />} />\n      <Route path=\"/register\" element={<RegisterPage />} />\n\n      {/* Dashboards */}\n      <Route path=\"/customer\" element={<CustomerDashboard />} />\n      <Route path=\"/merchant\" element={<MerchantDashboard />} />\n      <Route path=\"/admin\" element={<AdminDashboard />} />\n\n      {/* Orders */}\n      <Route path=\"/order/:storeId\" element={<OrderPage />} />\n      <Route path=\"/receipt/:orderId\" element={<ReceiptPage />} />\n\n      {/* Custom meal builder */}\n      <Route path=\"/customize\" element={<CustomizeMeal />} />\n\n      {/* Merchant-specific pages */}\n      <Route path=\"/merchant/menu\" element={<MenuPricing />} />\n      <Route path=\"/merchant/settings\" element={<StoreSettings />} />\n    </Routes>\n  );\n};\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <MerchantConfigProvider> {/* ✅ now context is available */}\n        <Router>\n          <Helmet>\n            <title>QuickMeal - Pre-Order Your Meals</title>\n            <meta\n              name=\"description\"\n              content=\"Skip the queue! Pre-order your favorite meals online and save time at your favorite restaurants.\"\n            />\n            <meta\n              property=\"og:title\"\n              content=\"QuickMeal - Pre-Order Your Meals\"\n            />\n            <meta\n              property=\"og:description\"\n              content=\"Skip the queue! Pre-order your favorite meals online and save time at your favorite restaurants.\"\n            />\n          </Helmet>\n\n          <AppRoutes />\n\n          <Toaster />\n        </Router>\n      </MerchantConfigProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2717},"src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 94.1%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n.meal-card {\n  background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.7) 100%);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255,255,255,0.3);\n}\n\n.store-card {\n  background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.8) 100%);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255,255,255,0.4);\n}\n\n.order-card {\n  background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.6) 100%);\n  backdrop-filter: blur(12px);\n  border: 1px solid rgba(255,255,255,0.3);\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, #f97316 0%, #ea580c 50%, #dc2626 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.floating-animation {\n  animation: float 6s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n.pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite alternate;\n}\n\n@keyframes pulse-glow {\n  from { box-shadow: 0 0 20px rgba(249, 115, 22, 0.4); }\n  to { box-shadow: 0 0 30px rgba(249, 115, 22, 0.8); }\n}","size_bytes":2833},"src/main.jsx":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from \"./App.jsx\";\nimport '@/index.css';\nimport { initializeDemoData } from '@/utils/demoData';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Initialize demo data on app start\ninitializeDemoData();\n\n// Initialize universities list if not present\nif (!localStorage.getItem('quickmeal_universities')) {\n  const initialUniversities = [\n    { id: uuidv4(), name: 'University of Colombo' },\n    { id: uuidv4(), name: 'University of Peradeniya' },\n    { id: uuidv4(), name: 'University of Moratuwa' },\n    { id: uuidv4(), name: 'University of Sri Jayewardenepura' },\n  ];\n  localStorage.setItem('quickmeal_universities', JSON.stringify(initialUniversities));\n}\n\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":848},"src/components/MealCustomizer.jsx":{"content":"import { useState } from \"react\";\nimport { categories, portionOptions, basePrices, curryPrices } from \"../data/meals\";\n\nexport default function MealCustomizer() {\n  const [main, setMain] = useState(categories.main[0]);\n  const [vegCurries, setVegCurries] = useState([]);\n  const [nonVegCurries, setNonVegCurries] = useState([]);\n  const [gravy, setGravy] = useState([]);\n  const [portion, setPortion] = useState(portionOptions[0]);\n  const [divisiblePieces, setDivisiblePieces] = useState({}); // track chicken, fish pieces etc.\n\n  // Compute meal type\n  const getMealType = () => {\n    if (nonVegCurries.length === 0) return \"vegMeal\";\n    if (nonVegCurries.length === 1 && nonVegCurries[0] === \"Egg\") return \"eggMeal\";\n    return \"nonVegMeal\";\n  };\n\n  // Compute price\n  const calculatePrice = () => {\n    const type = getMealType();\n    let price = basePrices[type]?.[portion.toLowerCase()] || 0;\n\n    // Extra veg curries beyond default\n    if (vegCurries.length > 2) {\n      const extraVeg = vegCurries.slice(2);\n      extraVeg.forEach(c => price += curryPrices[c] || 0);\n    }\n\n    // Non-veg curries\n    nonVegCurries.forEach(c => {\n      let qty = divisiblePieces[c] || 1;\n      price += (curryPrices[c] || 0) * qty;\n    });\n\n    // Gravy\n    gravy.forEach(c => price += curryPrices[c] || 0);\n\n    return price;\n  };\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md space-y-4\">\n      <h2 className=\"text-xl font-bold\">Customize Your Meal</h2>\n\n      {/* Main */}\n      <div>\n        <label className=\"font-medium\">Main:</label>\n        <select value={main} onChange={e => setMain(e.target.value)} className=\"ml-2 border p-1\">\n          {categories.main.map(m => <option key={m}>{m}</option>)}\n        </select>\n      </div>\n\n      {/* Veg Curries */}\n      <div>\n        <label className=\"font-medium\">Veg Curries:</label>\n        {categories.curries.veg.map(c => (\n          <label key={c} className=\"ml-2\">\n            <input\n              type=\"checkbox\"\n              checked={vegCurries.includes(c)}\n              onChange={e =>\n                setVegCurries(\n                  e.target.checked\n                    ? [...vegCurries, c]\n                    : vegCurries.filter(v => v !== c)\n                )\n              }\n            /> {c}\n          </label>\n        ))}\n      </div>\n\n      {/* Non-Veg Curries */}\n      <div>\n        <label className=\"font-medium\">Non-Veg Curries:</label>\n        {Object.entries(categories.curries.nonVeg).map(([type, items]) => (\n          <div key={type} className=\"ml-4\">\n            <p className=\"italic\">{type}:</p>\n            {items.map(c => (\n              <div key={c} className=\"ml-2\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={nonVegCurries.includes(c)}\n                    onChange={e => {\n                      if (e.target.checked) {\n                        setNonVegCurries([...nonVegCurries, c]);\n                        if (type === \"divisible\") setDivisiblePieces({ ...divisiblePieces, [c]: 1 });\n                      } else {\n                        setNonVegCurries(nonVegCurries.filter(n => n !== c));\n                        const copy = { ...divisiblePieces };\n                        delete copy[c];\n                        setDivisiblePieces(copy);\n                      }\n                    }}\n                  /> {c}\n                </label>\n                {type === \"divisible\" && nonVegCurries.includes(c) && (\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={divisiblePieces[c] || 1}\n                    onChange={e => setDivisiblePieces({ ...divisiblePieces, [c]: parseInt(e.target.value) })}\n                    className=\"ml-2 w-16 border p-1\"\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* Gravy */}\n      <div>\n        <label className=\"font-medium\">Gravy:</label>\n        {categories.gravy.map(c => (\n          <label key={c} className=\"ml-2\">\n            <input\n              type=\"checkbox\"\n              checked={gravy.includes(c)}\n              onChange={e =>\n                setGravy(\n                  e.target.checked\n                    ? [...gravy, c]\n                    : gravy.filter(g => g !== c)\n                )\n              }\n            /> {c}\n          </label>\n        ))}\n      </div>\n\n      {/* Portion */}\n      <div>\n        <label className=\"font-medium\">Portion:</label>\n        <select value={portion} onChange={e => setPortion(e.target.value)} className=\"ml-2 border p-1\">\n          {portionOptions.map(p => <option key={p}>{p}</option>)}\n        </select>\n      </div>\n\n      {/* Price */}\n      <div className=\"mt-4 text-lg font-bold\">\n        Total Price: Rs. {calculatePrice()}\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":4873},"src/contexts/AuthContext.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem('quickmeal_user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = (userData) => {\n    const users = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const userToLogin = users.find(u => \n      (u.email === userData.emailOrUsername || u.username === userData.emailOrUsername) \n      && u.password === userData.password\n    );\n\n    if (userToLogin) {\n      setUser(userToLogin);\n      localStorage.setItem('quickmeal_user', JSON.stringify(userToLogin));\n    }\n    return userToLogin;\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('quickmeal_user');\n  };\n\n  const register = (userData) => {\n    const users = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const newUser = {\n      ...userData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      approved: userData.role === 'customer' ? true : false\n    };\n    users.push(newUser);\n    localStorage.setItem('quickmeal_users', JSON.stringify(users));\n    \n    if (userData.role === 'customer') {\n      setUser(newUser);\n      localStorage.setItem('quickmeal_user', JSON.stringify(newUser));\n    }\n    \n    return newUser;\n  };\n\n  const updateUser = (updatedUserData) => {\n    const users = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const updatedUsers = users.map(u => u.id === updatedUserData.id ? updatedUserData : u);\n    localStorage.setItem('quickmeal_users', JSON.stringify(updatedUsers));\n    \n    if (user && user.id === updatedUserData.id) {\n      setUser(updatedUserData);\n      localStorage.setItem('quickmeal_user', JSON.stringify(updatedUserData));\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    updateUser,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":2413},"src/data/meals.js":{"content":"// src/data/meals.js\n\nexport const categories = {\n    main: [\"Rice\", \"String Hoppers\", \"Bread\"],\n    gravy: [\"Dal Curry\", \"Soya Curry\"],\n    curries: {\n      veg: [\"Potato Curry\", \"Beans Curry\", \"Pumpkin Curry\"],\n      nonVeg: {\n        divisible: [\"Chicken\", \"Fish\"],\n        nonDivisible: [\"Egg\", \"Beef\"]\n      }\n    },\n  };\n  \n  export const defaultMeal = {\n    main: \"Rice\",\n    vegCurries: 2, // default n number\n  };\n  \n  export const portionOptions = [\"Full\", \"Half\", \"Small\"];\n  \n  // Example merchant pricing\n  export const basePrices = {\n    vegMeal: { full: 250, half: 200, small: 150 },\n    eggMeal: { full: 260, half: 210, small: 160 },\n    // more merchant-defined prices...\n  };\n  \n  export const curryPrices = {\n    \"Chicken\": 120,\n    \"Fish\": 100,\n    \"Egg\": 80,\n    \"Beef\": 150,\n    \"Potato Curry\": 50,\n    \"Beans Curry\": 60,\n    \"Pumpkin Curry\": 70,\n    \"Dal Curry\": 40,\n    \"Soya Curry\": 50,\n  };\n  ","size_bytes":919},"src/lib/utils.js":{"content":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs) {\n\treturn twMerge(clsx(inputs));\n}","size_bytes":136},"src/pages/AdminDashboard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/use-toast';\nimport { LogOut, Users, Store, CheckCircle, XCircle, Clock, School as University, PlusCircle, Trash2 } from 'lucide-react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst AdminDashboard = () => {\n  const [users, setUsers] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [universities, setUniversities] = useState([]);\n  const [newUniversity, setNewUniversity] = useState('');\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!user || user.role !== 'admin') {\n      navigate('/login');\n      return;\n    }\n\n    loadUsers();\n    loadOrders();\n    loadUniversities();\n  }, [user, navigate]);\n\n  const loadUsers = () => {\n    const allUsers = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    setUsers(allUsers);\n  };\n\n  const loadOrders = () => {\n    const allOrders = JSON.parse(localStorage.getItem('quickmeal_orders') || '[]');\n    setOrders(allOrders);\n  };\n\n  const loadUniversities = () => {\n    const allUniversities = JSON.parse(localStorage.getItem('quickmeal_universities') || '[]');\n    setUniversities(allUniversities);\n  };\n\n  const approveMerchant = (merchantId) => {\n    const allUsers = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const updatedUsers = allUsers.map(u => \n      u.id === merchantId ? { ...u, approved: true } : u\n    );\n    localStorage.setItem('quickmeal_users', JSON.stringify(updatedUsers));\n    loadUsers();\n    toast({\n      title: 'Merchant Approved',\n      description: 'The merchant account has been approved successfully'\n    });\n  };\n\n  const rejectMerchant = (merchantId) => {\n    const allUsers = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const updatedUsers = allUsers.filter(u => u.id !== merchantId);\n    localStorage.setItem('quickmeal_users', JSON.stringify(updatedUsers));\n    loadUsers();\n    toast({\n      title: 'Merchant Rejected',\n      description: 'The merchant application has been rejected'\n    });\n  };\n\n  const handleAddUniversity = () => {\n    if (newUniversity.trim() === '') {\n      toast({ title: 'Invalid Name', description: 'University name cannot be empty.', variant: 'destructive' });\n      return;\n    }\n    const updatedUniversities = [...universities, { id: uuidv4(), name: newUniversity.trim() }];\n    localStorage.setItem('quickmeal_universities', JSON.stringify(updatedUniversities));\n    setUniversities(updatedUniversities);\n    setNewUniversity('');\n    toast({ title: 'University Added', description: `${newUniversity.trim()} has been added.` });\n  };\n\n  const handleDeleteUniversity = (id) => {\n    const updatedUniversities = universities.filter(uni => uni.id !== id);\n    localStorage.setItem('quickmeal_universities', JSON.stringify(updatedUniversities));\n    setUniversities(updatedUniversities);\n    toast({ title: 'University Removed', description: 'The university has been removed.' });\n  };\n\n  const handleLogout = () => {\n    logout();\n    toast({\n      title: 'Logged out',\n      description: 'See you next time!'\n    });\n    navigate('/');\n  };\n\n  const pendingMerchants = users.filter(u => u.role === 'merchant' && !u.approved);\n  const approvedMerchants = users.filter(u => u.role === 'merchant' && u.approved);\n  const customers = users.filter(u => u.role === 'customer');\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <Helmet>\n        <title>Admin Dashboard - QuickMeal</title>\n        <meta name=\"description\" content=\"Manage users, approve merchants, and oversee the QuickMeal platform.\" />\n        <meta property=\"og:title\" content=\"Admin Dashboard - QuickMeal\" />\n        <meta property=\"og:description\" content=\"Manage users, approve merchants, and oversee the QuickMeal platform.\" />\n      </Helmet>\n\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl font-bold gradient-text\">Admin Dashboard</h1>\n            <p className=\"text-gray-600 mt-2\">Manage the QuickMeal platform</p>\n          </motion.div>\n          \n          <Button onClick={handleLogout} variant=\"outline\" className=\"border-orange-300 text-orange-600 hover:bg-orange-50\">\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.1 }}\n          className=\"grid md:grid-cols-4 gap-6 mb-8\"\n        >\n          <Card className=\"store-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Customers</p>\n                  <p className=\"text-3xl font-bold text-blue-600\">{customers.length}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"store-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Merchants</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{approvedMerchants.length}</p>\n                </div>\n                <Store className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"store-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Pending Approvals</p>\n                  <p className=\"text-3xl font-bold text-orange-600\">{pendingMerchants.length}</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"store-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Orders</p>\n                  <p className=\"text-3xl font-bold text-purple-600\">{orders.length}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          <motion.section\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"lg:col-span-2\"\n          >\n            <Card className=\"store-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"w-5 h-5 mr-2 text-orange-500\" />\n                  Pending Merchant Approvals ({pendingMerchants.length})\n                </CardTitle>\n                <CardDescription>\n                  Review and approve new merchant applications\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {pendingMerchants.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No pending merchant applications</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {pendingMerchants.map(merchant => (\n                      <div key={merchant.id} className=\"border rounded-lg p-4 bg-white/50\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-lg\">{merchant.storeName}</h4>\n                            <p className=\"text-gray-600 mb-1\"><strong>Owner:</strong> {merchant.name}</p>\n                            <p className=\"text-gray-600 mb-1\"><strong>Email:</strong> {merchant.email}</p>\n                            <p className=\"text-gray-600 mb-1\"><strong>Address:</strong> {merchant.storeAddress}</p>\n                            <p className=\"text-gray-600 text-sm\"><strong>Applied:</strong> {new Date(merchant.createdAt).toLocaleDateString()}</p>\n                          </div>\n                          <div className=\"flex gap-2 ml-4\">\n                            <Button onClick={() => approveMerchant(merchant.id)} className=\"bg-green-500 hover:bg-green-600 text-white\"><CheckCircle className=\"w-4 h-4 mr-1\" />Approve</Button>\n                            <Button onClick={() => rejectMerchant(merchant.id)} variant=\"destructive\"><XCircle className=\"w-4 h-4 mr-1\" />Reject</Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.section>\n\n          <motion.section\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n            className=\"lg:col-span-1\"\n          >\n            <Card className=\"store-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <University className=\"w-5 h-5 mr-2 text-indigo-500\" />\n                  Manage Universities\n                </CardTitle>\n                <CardDescription>Add or remove universities from the platform.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex gap-2 mb-4\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"New university name...\"\n                    value={newUniversity}\n                    onChange={(e) => setNewUniversity(e.target.value)}\n                  />\n                  <Button onClick={handleAddUniversity} size=\"icon\"><PlusCircle className=\"w-4 h-4\" /></Button>\n                </div>\n                <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                  {universities.length > 0 ? universities.map(uni => (\n                    <div key={uni.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                      <span className=\"text-sm\">{uni.name}</span>\n                      <Button onClick={() => handleDeleteUniversity(uni.id)} variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                        <Trash2 className=\"w-4 h-4 text-red-500\" />\n                      </Button>\n                    </div>\n                  )) : <p className=\"text-sm text-gray-500 text-center\">No universities added yet.</p>}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.section>\n        </div>\n\n        <motion.section\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"mt-8\"\n        >\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card className=\"store-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\"><Store className=\"w-5 h-5 mr-2 text-green-500\" />Active Merchants ({approvedMerchants.length})</CardTitle>\n              </CardHeader>\n              <CardContent className=\"max-h-96 overflow-y-auto\">\n                {approvedMerchants.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No active merchants</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {approvedMerchants.map(merchant => (\n                      <div key={merchant.id} className=\"border rounded-lg p-3 bg-white/50\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <h4 className=\"font-semibold\">{merchant.storeName}</h4>\n                            <p className=\"text-sm text-gray-600\">{merchant.name}</p>\n                            <p className=\"text-xs text-gray-500\">{merchant.storeAddress}</p>\n                          </div>\n                          <Badge variant=\"default\">Active</Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"store-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\"><Users className=\"w-5 h-5 mr-2 text-blue-500\" />Customers ({customers.length})</CardTitle>\n              </CardHeader>\n              <CardContent className=\"max-h-96 overflow-y-auto\">\n                {customers.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No registered customers</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {customers.map(customer => (\n                      <div key={customer.id} className=\"border rounded-lg p-3 bg-white/50\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <h4 className=\"font-semibold\">{customer.name}</h4>\n                            <p className=\"text-sm text-gray-600\">{customer.email}</p>\n                            <p className=\"text-xs text-gray-500\">Joined: {new Date(customer.createdAt).toLocaleDateString()}</p>\n                          </div>\n                          <Badge variant=\"secondary\">Customer</Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </motion.section>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","size_bytes":14577},"src/pages/CustomerDashboard.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/use-toast';\nimport { \n  Store, Clock, MapPin, LogOut, ShoppingBag, Star, User, Heart, Settings, Bell, \n  XCircle, Receipt, CheckCheck, Sun, Moon, Coffee, Home, Package, MessageSquare,\n  TrendingUp, ChevronRight\n} from 'lucide-react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\n\nconst CustomerDashboard = () => {\n  const [stores, setStores] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const loadData = useCallback(() => {\n    if (!user || user.role !== 'customer') {\n      navigate('/login');\n      return;\n    }\n\n    const users = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n    const approvedMerchants = users.filter(u => u.role === 'merchant' && u.approved);\n    \n    const storeSettingsData = JSON.parse(localStorage.getItem('quickmeal_store_settings') || '{}');\n    \n    let storesWithSettings = approvedMerchants.map(merchant => {\n      const settings = storeSettingsData[merchant.id] || {};\n      return {\n        ...merchant,\n        isOpen: settings.isOpen !== false,\n        acceptingOrders: settings.acceptingOrders !== false,\n        orderLimit: settings.orderLimit || null,\n        closingTime: settings.closingTime || null,\n        universities: settings.universities || [],\n        activeMealTime: settings.activeMealTime || 'Lunch',\n        rating: (Math.random() * (5 - 3.5) + 3.5).toFixed(1),\n      };\n    });\n\n    if (user.university) {\n      storesWithSettings = storesWithSettings.filter(store => \n        store.universities.length === 0 || store.universities.includes(user.university)\n      );\n    }\n\n    setStores(storesWithSettings);\n\n    const allOrders = JSON.parse(localStorage.getItem('quickmeal_orders') || '[]');\n    const userOrders = allOrders.filter(order => order.customerId === user.id).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    setOrders(userOrders);\n  }, [user, navigate]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const handleLogout = () => {\n    logout();\n    toast({\n      title: 'Logged out',\n      description: 'See you next time!'\n    });\n    navigate('/');\n  };\n\n  const handleCancelOrder = (orderId) => {\n    const allOrders = JSON.parse(localStorage.getItem('quickmeal_orders') || '[]');\n    const updatedOrders = allOrders.map(order => \n      order.id === orderId ? { ...order, status: 'canceled' } : order\n    );\n    localStorage.setItem('quickmeal_orders', JSON.stringify(updatedOrders));\n    loadData();\n    toast({\n      title: 'Order Canceled',\n      description: 'Your order has been successfully canceled.',\n    });\n  };\n\n  const handleMarkAsDone = (orderId) => {\n    const allOrders = JSON.parse(localStorage.getItem('quickmeal_orders') || '[]');\n    const updatedOrders = allOrders.map(order =>\n      order.id === orderId ? { ...order, status: 'collected' } : order\n    );\n    localStorage.setItem('quickmeal_orders', JSON.stringify(updatedOrders));\n    loadData();\n    toast({\n      title: 'Order Collected!',\n      description: 'Thank you for your purchase!',\n    });\n  };\n\n  const getStoreStatus = (store) => {\n    if (!store.isOpen) return { status: 'Closed', color: 'bg-red-100 text-red-800' };\n    if (!store.acceptingOrders) return { status: 'Busy', color: 'bg-yellow-100 text-yellow-800' };\n    return { status: 'Open', color: 'bg-green-100 text-green-800' };\n  };\n  \n  const getOrderStatus = (status) => {\n    const statusMap = {\n      pending: { label: 'Pending', color: 'bg-gray-100 text-gray-800', icon: Clock },\n      preparing: { label: 'Preparing', color: 'bg-blue-100 text-blue-800', icon: Package },\n      ready: { label: 'Ready for Pickup', color: 'bg-green-100 text-green-800', icon: CheckCheck },\n      completed: { label: 'Completed', color: 'bg-purple-100 text-purple-800', icon: CheckCheck },\n      canceled: { label: 'Canceled', color: 'bg-red-100 text-red-800', icon: XCircle },\n      collected: { label: 'Collected', color: 'bg-green-100 text-green-800', icon: CheckCheck }\n    };\n    const details = statusMap[status] || { label: status, color: 'bg-gray-100 text-gray-800', icon: Clock };\n    const IconComponent = details.icon;\n    \n    return (\n      <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${details.color}`}>\n        <IconComponent className=\"w-4 h-4 mr-1\" />\n        {details.label}\n      </div>\n    );\n  };\n  \n  const handleFeatureClick = () => {\n    toast({\n      title: \"🚧 Feature in Progress!\",\n      description: \"This cool feature is still cooking. You can request it in your next prompt! 🚀\",\n    });\n  };\n\n  const MealTimeIcon = ({ time }) => {\n    switch (time) {\n      case 'Breakfast': return <Coffee className=\"w-4 h-4 mr-2 text-amber-600\" />;\n      case 'Lunch': return <Sun className=\"w-4 h-4 mr-2 text-orange-600\" />;\n      case 'Dinner': return <Moon className=\"w-4 h-4 mr-2 text-indigo-600\" />;\n      default: return null;\n    }\n  };\n\n  const sidebarItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home, active: activeTab === 'dashboard' },\n    { id: 'favorites', label: 'Favorites', icon: Heart, active: false },\n    { id: 'notifications', label: 'Notifications', icon: Bell, active: false },\n    { id: 'orders', label: 'My Orders', icon: Package, active: false },\n    { id: 'account', label: 'Account', icon: Settings, active: activeTab === 'account' },\n  ];\n\n  const AccountSettings = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Account Information</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Name</label>\n            <p className=\"text-gray-900 font-medium\">{user?.name}</p>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Email</label>\n            <p className=\"text-gray-900\">{user?.email}</p>\n          </div>\n          {user?.university && (\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">University</label>\n              <p className=\"text-gray-900\">{user.university}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 font-inter\">\n      <Helmet>\n        <title>Dashboard - QuickMeal</title>\n        <meta name=\"description\" content=\"Browse restaurants, place orders, and track your meal preparations.\" />\n      </Helmet>\n\n      <div className=\"flex\">\n        {/* Modern Sidebar */}\n        <motion.aside \n          initial={{ x: -100, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.5 }}\n          className=\"w-64 bg-white shadow-xl border-r border-gray-200 min-h-screen fixed left-0 top-0 z-10\"\n        >\n          <div className=\"p-6\">\n            <div className=\"flex items-center mb-8\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl flex items-center justify-center\">\n                <Store className=\"w-6 h-6 text-white\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-gray-900 ml-3\">QuickMeal</h1>\n            </div>\n            \n            <nav className=\"space-y-2\">\n              {sidebarItems.map((item) => (\n                <button\n                  key={item.id}\n                  onClick={() => {\n                    if (item.id === 'dashboard' || item.id === 'account') {\n                      setActiveTab(item.id);\n                    } else {\n                      handleFeatureClick();\n                    }\n                  }}\n                  className={`w-full flex items-center px-4 py-3 text-left rounded-xl transition-all duration-200 ${\n                    item.active\n                      ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg'\n                      : 'text-gray-700 hover:bg-gray-100'\n                  }`}\n                >\n                  <item.icon className={`w-5 h-5 mr-3 ${item.active ? 'text-white' : 'text-gray-500'}`} />\n                  <span className=\"font-medium\">{item.label}</span>\n                  {item.active && <ChevronRight className=\"w-4 h-4 ml-auto\" />}\n                </button>\n              ))}\n            </nav>\n          </div>\n          \n          <div className=\"absolute bottom-0 left-0 right-0 p-6\">\n            <Button \n              onClick={handleLogout} \n              variant=\"outline\" \n              className=\"w-full border-gray-200 hover:bg-gray-50\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </motion.aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 ml-64 p-8\">\n          {activeTab === 'dashboard' && (\n            <>\n              {/* Header */}\n              <motion.div \n                initial={{ opacity: 0, y: -20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6 }}\n                className=\"mb-8\"\n              >\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  Welcome back, {user?.name}! 👋\n                </h1>\n                <p className=\"text-gray-600\">Discover delicious meals from your favorite restaurants</p>\n              </motion.div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n                {/* Profile Card */}\n                <motion.div\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.1 }}\n                  className=\"lg:col-span-1\"\n                >\n                  <Card className=\"bg-gradient-to-br from-orange-500 to-red-500 text-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300\">\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"relative mb-4\">\n                        <div className=\"w-20 h-20 mx-auto bg-white/20 rounded-full p-1\">\n                          <div className=\"w-full h-full bg-white rounded-full flex items-center justify-center\">\n                            <User className=\"w-10 h-10 text-orange-500\" />\n                          </div>\n                        </div>\n                        <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-green-500 rounded-full border-2 border-white\"></div>\n                      </div>\n                      <h3 className=\"text-xl font-bold mb-1\">{user?.name}</h3>\n                      <p className=\"text-white/80 text-sm mb-3\">{user?.email}</p>\n                      {user?.university && (\n                        <Badge className=\"bg-white/20 text-white border-white/30 hover:bg-white/30\">\n                          {user.university}\n                        </Badge>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Recent Orders */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.6, delay: 0.2 }}\n                    className=\"mt-6\"\n                  >\n                    <Card className=\"bg-white shadow-xl border-0 hover:shadow-2xl transition-all duration-300\">\n                      <CardHeader className=\"pb-4\">\n                        <CardTitle className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                          <TrendingUp className=\"w-5 h-5 mr-2 text-orange-500\" />\n                          Recent Orders\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {orders.length > 0 ? (\n                          <div className=\"space-y-4\">\n                            {orders.slice(0, 3).map((order, index) => (\n                              <motion.div\n                                key={order.id}\n                                initial={{ opacity: 0, x: -20 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                transition={{ delay: index * 0.1 }}\n                                className=\"relative pl-6 pb-4 border-l-2 border-gray-200 last:border-l-0 last:pb-0\"\n                              >\n                                <div className=\"absolute -left-2 top-0 w-4 h-4 bg-orange-500 rounded-full border-2 border-white shadow-sm\"></div>\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <h4 className=\"font-medium text-gray-900 text-sm\">{order.storeName}</h4>\n                                    <span className=\"text-xs font-semibold text-gray-700\">${order.total.toFixed(2)}</span>\n                                  </div>\n                                  <p className=\"text-xs text-gray-500\">#{order.orderNumber}</p>\n                                  <div className=\"flex items-center justify-between\">\n                                    {getOrderStatus(order.status)}\n                                    <div className=\"flex gap-1\">\n                                      {order.status === 'pending' && (\n                                        <AlertDialog>\n                                          <AlertDialogTrigger asChild>\n                                            <Button size=\"sm\" variant=\"ghost\" className=\"h-8 w-8 p-0 text-red-500 hover:bg-red-50\">\n                                              <XCircle className=\"w-4 h-4\" />\n                                            </Button>\n                                          </AlertDialogTrigger>\n                                          <AlertDialogContent>\n                                            <AlertDialogHeader>\n                                              <AlertDialogTitle>Cancel Order?</AlertDialogTitle>\n                                              <AlertDialogDescription>\n                                                This action cannot be undone. Your order will be permanently canceled.\n                                              </AlertDialogDescription>\n                                            </AlertDialogHeader>\n                                            <AlertDialogFooter>\n                                              <AlertDialogCancel>Back</AlertDialogCancel>\n                                              <AlertDialogAction \n                                                onClick={() => handleCancelOrder(order.id)}\n                                                className=\"bg-red-500 hover:bg-red-600\"\n                                              >\n                                                Yes, Cancel\n                                              </AlertDialogAction>\n                                            </AlertDialogFooter>\n                                          </AlertDialogContent>\n                                        </AlertDialog>\n                                      )}\n                                      <Link to={`/receipt/${order.id}`}>\n                                        <Button size=\"sm\" variant=\"ghost\" className=\"h-8 w-8 p-0 text-orange-500 hover:bg-orange-50\">\n                                          <Receipt className=\"w-4 h-4\" />\n                                        </Button>\n                                      </Link>\n                                    </div>\n                                  </div>\n                                </div>\n                              </motion.div>\n                            ))}\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <Package className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                            <p className=\"text-sm text-gray-500\">No recent orders</p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                </motion.div>\n\n                {/* Restaurants Section */}\n                <div className=\"lg:col-span-3\">\n                  <motion.div\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.6, delay: 0.3 }}\n                  >\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <h2 className=\"text-2xl font-bold text-gray-900\">\n                        Available Restaurants\n                        {user?.university && (\n                          <span className=\"text-lg font-normal text-gray-600 ml-2\">at {user.university}</span>\n                        )}\n                      </h2>\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                        {stores.filter(s => s.isOpen && s.acceptingOrders).length} open now\n                      </div>\n                    </div>\n\n                    {stores.length === 0 ? (\n                      <Card className=\"bg-white shadow-xl border-0 text-center py-16\">\n                        <CardContent>\n                          <Store className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <h3 className=\"text-xl font-semibold mb-2 text-gray-600\">No Restaurants Available</h3>\n                          <p className=\"text-gray-500\">Check back later or update your university in settings.</p>\n                        </CardContent>\n                      </Card>\n                    ) : (\n                      <div className=\"grid md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                        {stores.map((store, index) => {\n                          const storeStatus = getStoreStatus(store);\n                          return (\n                            <motion.div\n                              key={store.id}\n                              initial={{ opacity: 0, y: 30 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              transition={{ duration: 0.5, delay: index * 0.1 }}\n                              whileHover={{ y: -8, scale: 1.02 }}\n                              className=\"group\"\n                            >\n                              <Card className=\"bg-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300 overflow-hidden h-full\">\n                                <div className=\"relative\">\n                                  <div className=\"h-48 bg-gradient-to-br from-orange-200 to-red-200 relative overflow-hidden\">\n                                    <img \n                                      src=\"https://images.unsplash.com/photo-1597236654171-3085a99f453f\" \n                                      alt={`Food from ${store.storeName}`}\n                                      className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                                    />\n                                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\"></div>\n                                  </div>\n                                  \n                                  <div className=\"absolute top-4 right-4\">\n                                    <span className={`px-3 py-1 rounded-full text-sm font-medium shadow-lg ${storeStatus.color}`}>\n                                      {storeStatus.status}\n                                    </span>\n                                  </div>\n                                  \n                                  <div className=\"absolute bottom-4 left-4 flex items-center bg-black/60 text-white px-3 py-1 rounded-full\">\n                                    <Star className=\"w-4 h-4 mr-1 fill-yellow-400 text-yellow-400\" />\n                                    <span className=\"text-sm font-medium\">{store.rating}</span>\n                                  </div>\n                                </div>\n\n                                <CardContent className=\"p-6 space-y-4\">\n                                  <div>\n                                    <h3 className=\"text-xl font-bold text-gray-900 mb-2 group-hover:text-orange-600 transition-colors\">\n                                      {store.storeName}\n                                    </h3>\n                                    <div className=\"flex items-center text-gray-500 text-sm\">\n                                      <MapPin className=\"w-4 h-4 mr-1 flex-shrink-0\" />\n                                      <span className=\"truncate\">{store.storeAddress}</span>\n                                    </div>\n                                  </div>\n\n                                  {store.activeMealTime && (\n                                    <div className=\"flex items-center bg-gradient-to-r from-blue-50 to-indigo-50 p-3 rounded-xl\">\n                                      <MealTimeIcon time={store.activeMealTime} />\n                                      <span className=\"text-sm font-medium text-gray-700\">\n                                        Accepting <span className=\"font-semibold\">{store.activeMealTime}</span> orders\n                                      </span>\n                                    </div>\n                                  )}\n\n                                  {store.closingTime && (\n                                    <div className=\"flex items-center text-sm text-gray-600\">\n                                      <Clock className=\"w-4 h-4 mr-2 text-gray-400\" />\n                                      <span>Closes at <span className=\"font-semibold\">{store.closingTime}</span></span>\n                                    </div>\n                                  )}\n                                </CardContent>\n\n                                <CardFooter className=\"p-6 pt-0\">\n                                  {store.isOpen && store.acceptingOrders ? (\n                                    <Link to={`/order/${store.id}`} className=\"w-full\">\n                                      <Button className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 rounded-xl py-6\">\n                                        <ShoppingBag className=\"w-5 h-5 mr-2\" />\n                                        <span className=\"font-semibold\">Order Now</span>\n                                      </Button>\n                                    </Link>\n                                  ) : (\n                                    <Button disabled className=\"w-full rounded-xl py-6 bg-gray-100 text-gray-500\">\n                                      {!store.isOpen ? 'Currently Closed' : 'Not Accepting Orders'}\n                                    </Button>\n                                  )}\n                                </CardFooter>\n                              </Card>\n                            </motion.div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </motion.div>\n                </div>\n              </div>\n            </>\n          )}\n\n          {activeTab === 'account' && (\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n            >\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Account Settings</h1>\n              <AccountSettings />\n            </motion.div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomerDashboard;","size_bytes":24761},"src/pages/CustomizeMeal.jsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { calculateMealPrice } from \"@/utils/pricingEngine\";\n\nconst CustomizeMeal = () => {\n  const { storeId } = useParams();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const [storeSettings, setStoreSettings] = useState(null);\n  const [selectedMeal, setSelectedMeal] = useState(null);\n  const [selectedPortion, setSelectedPortion] = useState(\"small\");\n  const [selectedVegCurries, setSelectedVegCurries] = useState([]);\n  const [selectedNonVegCurries, setSelectedNonVegCurries] = useState([]);\n  const [extraPieces, setExtraPieces] = useState({});\n  const [price, setPrice] = useState(0);\n\n  // 🟠 Load store settings from localStorage\n  useEffect(() => {\n    const allSettings = JSON.parse(localStorage.getItem(\"quickmeal_store_settings\") || \"{}\");\n    if (allSettings[storeId]) {\n      setStoreSettings(allSettings[storeId]);\n    }\n  }, [storeId]);\n\n  // 🟠 Calculate price whenever selections change\n  useEffect(() => {\n    if (!storeSettings || !selectedMeal) return;\n    const mealConfig = {\n      mainMealId: selectedMeal.id,\n      portionCategoryId: selectedPortion,\n      vegCurries: selectedVegCurries,\n      nonVegCurries: selectedNonVegCurries.map((c) => ({\n        ...c,\n        pieces: extraPieces[c.id] || 1\n      }))\n    };\n    const finalPrice = calculateMealPrice(storeSettings, mealConfig);\n    setPrice(finalPrice);\n  }, [storeSettings, selectedMeal, selectedPortion, selectedVegCurries, selectedNonVegCurries, extraPieces]);\n\n  const toggleVegCurry = (curry) => {\n    setSelectedVegCurries((prev) =>\n      prev.includes(curry.id)\n        ? prev.filter((id) => id !== curry.id)\n        : [...prev, curry.id]\n    );\n  };\n\n  const toggleNonVegCurry = (curry) => {\n    setSelectedNonVegCurries((prev) =>\n      prev.find((c) => c.id === curry.id)\n        ? prev.filter((c) => c.id !== curry.id)\n        : [...prev, { id: curry.id, name: curry.name }]\n    );\n  };\n\n  const addToCart = () => {\n    if (!user) {\n      toast({ title: \"Login Required\", description: \"Please log in to order.\" });\n      navigate(\"/login\");\n      return;\n    }\n\n    const cart = JSON.parse(localStorage.getItem(\"quickmeal_cart\") || \"[]\");\n\n    const orderItem = {\n      id: Date.now(),\n      storeId,\n      mainMeal: selectedMeal,\n      portion: selectedPortion,\n      vegCurries: selectedVegCurries,\n      nonVegCurries: selectedNonVegCurries.map((c) => ({\n        ...c,\n        pieces: extraPieces[c.id] || 1\n      })),\n      price,\n      createdAt: new Date().toISOString()\n    };\n\n    localStorage.setItem(\"quickmeal_cart\", JSON.stringify([...cart, orderItem]));\n\n    toast({\n      title: \"Added to Cart\",\n      description: `${selectedMeal.name} has been added to your cart.`\n    });\n\n    navigate(\"/cart\");\n  };\n\n  if (!storeSettings) {\n    return <div className=\"p-6 text-center\">Loading store settings...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6\">\n      <Helmet>\n        <title>Customize Your Meal - QuickMeal</title>\n        <meta\n          name=\"description\"\n          content=\"Build your perfect meal with curries and portion options.\"\n        />\n      </Helmet>\n\n      <div className=\"max-w-3xl mx-auto space-y-6\">\n        <h1 className=\"text-2xl font-bold text-center\">Customize Your Meal</h1>\n\n        {/* 🟠 Choose Main Meal */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-3\">Main Meal</h2>\n            <div className=\"flex flex-wrap gap-2\">\n              {storeSettings.mainMeals.map((meal) => (\n                <Button\n                  key={meal.id}\n                  variant={selectedMeal?.id === meal.id ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedMeal(meal)}\n                >\n                  {meal.name}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 🟠 Portion Selection */}\n        {selectedMeal && (\n          <Card>\n            <CardContent className=\"p-4\">\n              <h2 className=\"font-semibold mb-3\">Choose Portion</h2>\n              <div className=\"flex flex-wrap gap-2\">\n                {storeSettings.portionCategories.map((portion) => (\n                  <Button\n                    key={portion.id}\n                    variant={selectedPortion === portion.id ? \"default\" : \"outline\"}\n                    onClick={() => setSelectedPortion(portion.id)}\n                  >\n                    {portion.name} ({selectedMeal.portionPrices[portion.id]} Rs)\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 🟠 Veg Curries */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-3\">Veg Curries</h2>\n            <div className=\"flex flex-wrap gap-2\">\n              {storeSettings.curries\n                .filter((c) => c.type === \"veg\")\n                .map((curry) => (\n                  <Button\n                    key={curry.id}\n                    variant={selectedVegCurries.includes(curry.id) ? \"default\" : \"outline\"}\n                    onClick={() => toggleVegCurry(curry)}\n                  >\n                    {curry.name}\n                  </Button>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 🟠 Non-Veg Curries */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h2 className=\"font-semibold mb-3\">Non-Veg Curries</h2>\n            <div className=\"flex flex-col gap-3\">\n              {storeSettings.curries\n                .filter((c) => c.type === \"non-veg\")\n                .map((curry) => {\n                  const selected = selectedNonVegCurries.find((c) => c.id === curry.id);\n                  return (\n                    <div key={curry.id} className=\"flex items-center gap-3\">\n                      <Button\n                        variant={selected ? \"default\" : \"outline\"}\n                        onClick={() => toggleNonVegCurry(curry)}\n                      >\n                        {curry.name}\n                      </Button>\n                      {selected && curry.divisible && (\n                        <input\n                          type=\"number\"\n                          min=\"1\"\n                          value={extraPieces[curry.id] || 1}\n                          onChange={(e) =>\n                            setExtraPieces((prev) => ({\n                              ...prev,\n                              [curry.id]: parseInt(e.target.value, 10)\n                            }))\n                          }\n                          className=\"w-16 border rounded p-1\"\n                        />\n                      )}\n                    </div>\n                  );\n                })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 🟠 Price + Add to Cart */}\n        <div className=\"flex items-center justify-between p-4 bg-white shadow rounded\">\n          <span className=\"text-lg font-semibold\">Total: Rs {price}</span>\n          <Button onClick={addToCart} disabled={!selectedMeal}>\n            Add to Cart\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomizeMeal;\n","size_bytes":7617},"src/pages/HomePage.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock, Users, ShoppingBag, Star, ChefHat, Smartphone } from 'lucide-react';\nimport MainLayout from '@/components/layout/MainLayout';\nconst HomePage = () => {\n  const features = [{\n    icon: Clock,\n    title: 'Skip the Queue',\n    description: 'Pre-order your meals and save precious time'\n  }, {\n    icon: Users,\n    title: 'Multi-Role System',\n    description: 'Customers, merchants, and admin management'\n  }, {\n    icon: ShoppingBag,\n    title: 'Easy Ordering',\n    description: 'Simple meal selection with customization options'\n  }, {\n    icon: Star,\n    title: 'Quality Service',\n    description: 'Real-time order tracking and updates'\n  }];\n  return <MainLayout>\n      <Helmet>\n        <title>QuickMeal - Skip the Queue, Pre-Order Your Meals</title>\n        <meta name=\"description\" content=\"Revolutionary meal pre-ordering platform that helps you skip queues and save time at your favorite restaurants.\" />\n        <meta property=\"og:title\" content=\"QuickMeal - Skip the Queue, Pre-Order Your Meals\" />\n        <meta property=\"og:description\" content=\"Revolutionary meal pre-ordering platform that helps you skip queues and save time at your favorite restaurants.\" />\n      </Helmet>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center py-20 px-4 text-center text-white\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n        <div className=\"relative max-w-7xl mx-auto\">\n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8\n        }} className=\"floating-animation\">\n            <ChefHat className=\"w-20 h-20 mx-auto mb-8 text-orange-400\" />\n          </motion.div>\n          \n          <motion.h1 initial={{\n          opacity: 0,\n          y: 30\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8,\n          delay: 0.2\n        }} className=\"text-5xl md:text-7xl font-bold mb-6 text-white drop-shadow-lg\">\n            QuickMeal\n          </motion.h1>\n          \n          <motion.p initial={{\n          opacity: 0,\n          y: 30\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8,\n          delay: 0.4\n        }} className=\"text-xl md:text-2xl text-gray-200 mb-8 max-w-3xl mx-auto\">\n            Skip the queue! Pre-order your favorite meals online and save time at your favorite restaurants.\n          </motion.p>\n          \n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8,\n          delay: 0.6\n        }} className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Link to=\"/login\">\n              <Button size=\"lg\" className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white px-8 py-4 text-lg pulse-glow\">\n                Merchant\n              </Button>\n            </Link>\n            <Link to=\"/login\">\n              <Button variant=\"outline\" size=\"lg\" className=\"border-orange-300 text-orange-200 hover:bg-orange-900/20 px-8 py-4 text-lg\">Customer</Button>\n            </Link>\n          </motion.div>\n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8,\n          delay: 0.8\n        }} className=\"mt-6\">\n            <Link to=\"/register\">\n              <Button variant=\"secondary\" size=\"lg\" className=\"bg-white text-orange-600 hover:bg-orange-50 px-8 py-4 text-lg font-semibold\">\n                Register\n              </Button>\n            </Link>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 bg-white/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} whileInView={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8\n        }} viewport={{\n          once: true\n        }} className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 gradient-text\">\n              Why Choose QuickMeal?\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Experience the future of food ordering with our innovative platform\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => <motion.div key={index} initial={{\n            opacity: 0,\n            y: 30\n          }} whileInView={{\n            opacity: 1,\n            y: 0\n          }} transition={{\n            duration: 0.6,\n            delay: index * 0.1\n          }} viewport={{\n            once: true\n          }} whileHover={{\n            scale: 1.05\n          }}>\n                <Card className=\"meal-card h-full hover:shadow-xl transition-all duration-300\">\n                  <CardHeader className=\"text-center\">\n                    <feature.icon className=\"w-12 h-12 mx-auto mb-4 text-orange-500\" />\n                    <CardTitle className=\"text-xl font-bold text-gray-800\">\n                      {feature.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-center text-gray-600\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              </motion.div>)}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 px-4 bg-white/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} whileInView={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8\n        }} viewport={{\n          once: true\n        }} className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 gradient-text\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Simple steps to get your meal ready when you arrive\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[{\n            step: '1',\n            title: 'Choose Your Store',\n            description: 'Browse and select from registered restaurants',\n            icon: '🏪'\n          }, {\n            step: '2',\n            title: 'Customize Your Meal',\n            description: 'Select meal type, curries, and add extras',\n            icon: '🍛'\n          }, {\n            step: '3',\n            title: 'Pick Up & Enjoy',\n            description: 'Arrive at the store and collect your ready meal',\n            icon: '✨'\n          }].map((item, index) => <motion.div key={index} initial={{\n            opacity: 0,\n            y: 30\n          }} whileInView={{\n            opacity: 1,\n            y: 0\n          }} transition={{\n            duration: 0.6,\n            delay: index * 0.2\n          }} viewport={{\n            once: true\n          }} className=\"text-center\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white text-2xl font-bold shadow-lg\">\n                  {item.step}\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4 text-gray-800\">{item.title}</h3>\n                <p className=\"text-gray-600 text-lg\">{item.description}</p>\n                <div className=\"text-4xl mt-4\">{item.icon}</div>\n              </motion.div>)}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-r from-orange-500 to-red-500\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div initial={{\n          opacity: 0,\n          y: 30\n        }} whileInView={{\n          opacity: 1,\n          y: 0\n        }} transition={{\n          duration: 0.8\n        }} viewport={{\n          once: true\n        }}>\n            <Smartphone className=\"w-16 h-16 mx-auto mb-6 text-white\" />\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-white\">\n              Ready to Skip the Queue?\n            </h2>\n            <p className=\"text-xl text-orange-100 mb-8 max-w-2xl mx-auto\">\n              Join thousands of satisfied customers who save time every day with QuickMeal\n            </p>\n            <Link to=\"/login\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"bg-white text-orange-600 hover:bg-orange-50 px-8 py-4 text-lg font-semibold\">\n                Start Ordering Now\n              </Button>\n            </Link>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12 px-4\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <ChefHat className=\"w-8 h-8 mr-2 text-orange-500\" />\n            <span className=\"text-2xl font-bold\">QuickMeal</span>\n          </div>\n          <p className=\"text-gray-400 mb-4\">\n            Revolutionizing the way you order food. Save time, skip queues, enjoy meals.\n          </p>\n          <p className=\"text-gray-500 text-sm\">\n            © 2025 QuickMeal. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </MainLayout>;\n};\nexport default HomePage;","size_bytes":10111},"src/pages/LoginPage.jsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/use-toast';\nimport { ChefHat, ArrowLeft } from 'lucide-react';\n\nconst GoogleIcon = (props) => (\n  <svg viewBox=\"0 0 48 48\" {...props}>\n    <path fill=\"#FFC107\" d=\"M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z\"></path>\n    <path fill=\"#FF3D00\" d=\"M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z\"></path>\n    <path fill=\"#4CAF50\" d=\"M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z\"></path>\n    <path fill=\"#1976D2\" d=\"M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571l6.19,5.238C43.021,36.251,44,34,44,30C44,22.659,43.862,21.35,43.611,20.083z\"></path>\n  </svg>\n);\n\n\nconst LoginPage = () => {\n  const [formData, setFormData] = useState({\n    emailOrUsername: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const handleGoogleLogin = () => {\n    toast({\n      title: 'Coming Soon!',\n      description: '🚧 This feature isn\\'t implemented yet—but don\\'t worry! You can request it in your next prompt! 🚀',\n    });\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const user = login(formData);\n\n      if (!user) {\n        toast({\n          title: 'Login Failed',\n          description: 'Invalid credentials',\n          variant: 'destructive'\n        });\n        setLoading(false);\n        return;\n      }\n\n      if (user.role === 'merchant' && !user.approved) {\n        toast({\n          title: 'Account Pending',\n          description: 'Your merchant account is pending admin approval',\n          variant: 'destructive'\n        });\n        setLoading(false);\n        return;\n      }\n\n      toast({\n        title: 'Welcome back!',\n        description: 'Successfully logged in'\n      });\n\n      switch (user.role) {\n        case 'customer':\n          navigate('/customer');\n          break;\n        case 'merchant':\n          navigate('/merchant');\n          break;\n        case 'admin':\n          navigate('/admin');\n          break;\n        default:\n          navigate('/');\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Something went wrong. Please try again.',\n        variant: 'destructive'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <Helmet>\n        <title>Sign In - QuickMeal</title>\n        <meta name=\"description\" content=\"Sign in to your QuickMeal account and start pre-ordering your favorite meals.\" />\n        <meta property=\"og:title\" content=\"Sign In - QuickMeal\" />\n        <meta property=\"og:description\" content=\"Sign in to your QuickMeal account and start pre-ordering your favorite meals.\" />\n      </Helmet>\n\n      <div className=\"w-full max-w-md\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Link to=\"/\" className=\"inline-flex items-center text-orange-600 hover:text-orange-700 mb-6 transition-colors\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n\n          <Card className=\"meal-card shadow-2xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <ChefHat className=\"w-12 h-12 text-orange-500\" />\n              </div>\n              <CardTitle className=\"text-3xl font-bold gradient-text\">Welcome Back</CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                Sign in to your QuickMeal account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"emailOrUsername\">Email or Username</Label>\n                  <Input\n                    id=\"emailOrUsername\"\n                    name=\"emailOrUsername\"\n                    value={formData.emailOrUsername}\n                    onChange={handleChange}\n                    required\n                    className=\"border-orange-200 focus:border-orange-400\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={handleChange}\n                    required\n                    className=\"border-orange-200 focus:border-orange-400\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white py-3\"\n                  disabled={loading}\n                >\n                  {loading ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </form>\n              \n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white/95 px-2 text-gray-500\">Or continue with</span>\n                </div>\n              </div>\n\n              <Button variant=\"outline\" className=\"w-full\" onClick={handleGoogleLogin}>\n                <GoogleIcon className=\"mr-2 h-4 w-4\" />\n                Sign in with Google\n              </Button>\n\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-600\">\n                  Don't have an account?{' '}\n                  <Link to=\"/register\" className=\"text-orange-600 hover:text-orange-700 font-semibold\">\n                    Sign up here\n                  </Link>\n                </p>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-orange-50 rounded-lg\">\n                <p className=\"text-sm text-gray-700 font-semibold mb-2\">Demo Accounts:</p>\n                <div className=\"text-xs text-gray-600 space-y-1\">\n                  <p><strong>Admin:</strong> admin@quickmeal.com / admin123</p>\n                  <p><strong>Customer:</strong> customer / customer123</p>\n                  <p><strong>Merchant:</strong> merchant@test.com / merchant123</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;","size_bytes":7826},"src/pages/MerchantDashboard.jsx":{"content":"// src/pages/MerchantDashboard.jsx\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport DashboardHeader from \"@/components/merchant/DashboardHeader\";\nimport StatsCards from \"@/components/merchant/StatsCards\";\nimport OrdersTab from \"@/components/merchant/OrdersTab\";\nimport MenuPricing from \"./Merchant/MenuPricing\";\nimport StoreSettings from \"./Merchant/StoreSettings\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst MerchantDashboard = () => {\n  const [orders, setOrders] = useState([]);\n  const [storeSettings, setStoreSettings] = useState({\n    isOpen: true,\n    acceptingOrders: true,\n    orderLimit: null,\n    closingTime: \"\",\n    universities: [],\n    activeMealTime: \"Lunch\",\n    defaultVegCurries: 2,\n    vegCurryPrice: 50,\n    portionCategories: [\n      { id: \"small\", name: \"Small\", divisions: 1 },\n      { id: \"half\", name: \"Half\", divisions: 2 },\n      { id: \"full\", name: \"Full\", divisions: 3 }\n    ],\n    mainMeals: [\n      {\n        id: uuidv4(),\n        name: \"Rice & Curry\",\n        portionPrices: { small: 200, half: 250, full: 300 }\n      }\n    ],\n    curries: [\n      {\n        id: uuidv4(),\n        name: \"Dhal Curry\",\n        type: \"veg\",\n        price: 30\n      },\n      {\n        id: uuidv4(),\n        name: \"Chicken Curry\",\n        type: \"non-veg\",\n        divisible: true,\n        portionPrices: { small: 120, half: 160, full: 200 },\n        extraPiecePrice: 40\n      }\n    ]\n  });\n\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  // Load orders\n  const loadOrders = useCallback(() => {\n    if (!user) return;\n    const allOrders = JSON.parse(localStorage.getItem(\"quickmeal_orders\") || \"[]\");\n    const storeOrders = allOrders.filter((order) => order.storeId === user.id);\n    setOrders(storeOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)));\n  }, [user]);\n\n  // Load store settings\n  const loadStoreSettings = useCallback(() => {\n    if (!user) return;\n    const settings = JSON.parse(localStorage.getItem(\"quickmeal_store_settings\") || \"{}\");\n    if (settings[user.id]) {\n      setStoreSettings((prev) => ({ ...prev, ...settings[user.id] }));\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (!user || user.role !== \"merchant\" || !user.approved) {\n      navigate(\"/login\");\n      return;\n    }\n    loadOrders();\n    loadStoreSettings();\n    const interval = setInterval(loadOrders, 5000);\n    return () => clearInterval(interval);\n  }, [user, navigate, loadOrders, loadStoreSettings]);\n\n  // Save settings\n  const saveStoreSettings = () => {\n    const allSettings = JSON.parse(localStorage.getItem(\"quickmeal_store_settings\") || \"{}\");\n    allSettings[user.id] = storeSettings;\n    localStorage.setItem(\"quickmeal_store_settings\", JSON.stringify(allSettings));\n    toast({ title: \"Settings Updated\", description: \"Your store settings have been saved successfully\" });\n  };\n\n  // Update order status\n  const updateOrderStatus = (orderId, newStatus) => {\n    const allOrders = JSON.parse(localStorage.getItem(\"quickmeal_orders\") || \"[]\");\n    const updatedOrders = allOrders.map((order) =>\n      order.id === orderId ? { ...order, status: newStatus } : order\n    );\n    localStorage.setItem(\"quickmeal_orders\", JSON.stringify(updatedOrders));\n    loadOrders();\n    toast({ title: \"Order Updated\", description: `Order status changed to ${newStatus}` });\n  };\n\n  // Logout\n  const handleLogout = () => {\n    logout();\n    toast({ title: \"Logged out\", description: \"See you next time!\" });\n    navigate(\"/\");\n  };\n\n  // Order stats\n  const pendingOrders = orders.filter((o) => o.status === \"pending\");\n  const activeOrders = orders.filter((o) => o.status === \"ready\");\n  const completedOrdersToday = orders.filter((o) => {\n    const d = new Date(o.createdAt), t = new Date();\n    return (\n      (o.status === \"completed\" || o.status === \"collected\") &&\n      d.getDate() === t.getDate() && d.getMonth() === t.getMonth() && d.getFullYear() === t.getFullYear()\n    );\n  });\n  const completedOrdersThisMonth = orders.filter((o) => {\n    const d = new Date(o.createdAt), t = new Date();\n    return (\n      (o.status === \"completed\" || o.status === \"collected\") &&\n      d.getMonth() === t.getMonth() && d.getFullYear() === t.getFullYear()\n    );\n  });\n\n  return (\n    <div className=\"min-h-screen p-4 bg-gray-50\">\n      <Helmet>\n        <title>Merchant Dashboard - QuickMeal</title>\n        <meta name=\"description\" content=\"Manage your restaurant orders, menu, and store settings on QuickMeal.\" />\n      </Helmet>\n\n      <div className=\"max-w-7xl mx-auto\">\n        <DashboardHeader storeName={user?.storeName} onLogout={handleLogout} />\n\n        <StatsCards\n          pendingCount={pendingOrders.length}\n          activeCount={activeOrders.length}\n          completedTodayCount={completedOrdersToday.length}\n          completedMonthCount={completedOrdersThisMonth.length}\n        />\n\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n        >\n          <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n              <TabsTrigger value=\"menu\">Menu & Pricing</TabsTrigger>\n              <TabsTrigger value=\"settings\">Store Settings</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"orders\">\n              <OrdersTab\n                pendingOrders={pendingOrders}\n                activeOrders={orders.filter((o) => o.status === \"completed\")}\n                onUpdateStatus={updateOrderStatus}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"menu\">\n              <MenuPricing\n                storeSettings={storeSettings}\n                setStoreSettings={setStoreSettings}\n                onSave={saveStoreSettings}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"settings\">\n              <StoreSettings\n                settings={storeSettings}\n                setSettings={setStoreSettings}\n                onSave={saveStoreSettings}\n              />\n            </TabsContent>\n          </Tabs>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default MerchantDashboard;\n","size_bytes":6619},"src/pages/OrderPage.jsx":{"content":"// src/pages/OrderPage.jsx\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { ArrowLeft, PlusCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { calculateMealPrice } from \"@/utils/pricingEngine\";\n\nconst createNewMeal = () => ({\n  id: Date.now(),\n  mainMeal: \"\",\n  portion: \"\",\n  vegCurries: [],\n  nonVegCurries: [],\n  gravies: [],\n});\n\nconst OrderPage = () => {\n  const { storeId } = useParams();\n  const [store, setStore] = useState(null);\n  const [storeSettings, setStoreSettings] = useState(null);\n  const [merchantConfig, setMerchantConfig] = useState(null);\n  const [meals, setMeals] = useState([createNewMeal()]);\n  const [loading, setLoading] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  /** 🔹 Load merchant + settings from localStorage */\n  const loadStore = useCallback(() => {\n    const users = JSON.parse(localStorage.getItem(\"quickmeal_users\") || \"[]\");\n    const merchant = users.find(\n      (u) => u.id === storeId && u.role === \"merchant\" && u.approved\n    );\n\n    if (!merchant) {\n      toast({\n        title: \"Store Not Found\",\n        description: \"The requested store could not be found\",\n        variant: \"destructive\",\n      });\n      navigate(\"/customer\");\n      return;\n    }\n\n    const settings = JSON.parse(\n      localStorage.getItem(\"quickmeal_store_settings\") || \"{}\"\n    );\n    const currentStoreSettings = settings[storeId];\n\n    if (!currentStoreSettings?.isOpen || !currentStoreSettings?.acceptingOrders) {\n      toast({\n        title: \"Store Unavailable\",\n        description: currentStoreSettings?.isOpen\n          ? \"Store is currently in busy hours\"\n          : \"Store is currently closed\",\n        variant: \"destructive\",\n      });\n      navigate(\"/customer\");\n      return;\n    }\n\n    const merchantConfigData = JSON.parse(\n      localStorage.getItem(\"merchantConfig\") || \"{}\"\n    );\n\n    setStore(merchant);\n    setStoreSettings(currentStoreSettings);\n    setMerchantConfig(merchantConfigData);\n  }, [storeId, navigate, toast]);\n\n  /** 🔹 Redirect if not customer */\n  useEffect(() => {\n    if (!user || user.role !== \"customer\") {\n      navigate(\"/login\");\n      return;\n    }\n    loadStore();\n  }, [user, navigate, loadStore]);\n\n  /** 🔹 Update meal selections */\n  const updateMeal = useCallback((index, updatedMealData) => {\n    setMeals((currentMeals) => {\n      const newMeals = [...currentMeals];\n      newMeals[index] = { ...newMeals[index], ...updatedMealData };\n      return newMeals;\n    });\n  }, []);\n\n  /** 🔹 Calculate meal prices using useMemo to avoid render loop */\n  const mealsWithTotals = useMemo(() => {\n    if (!storeSettings || !merchantConfig) return meals.map(meal => ({ ...meal, total: 0 }));\n    return meals.map((meal) => ({\n      ...meal,\n      total: calculateMealPrice(meal, { ...storeSettings, ...merchantConfig }),\n    }));\n  }, [meals, storeSettings, merchantConfig]);\n\n  /** 🔹 Calculate order total using useMemo */\n  const calculatedOrderTotal = useMemo(() => {\n    return mealsWithTotals.reduce((sum, meal) => sum + meal.total, 0);\n  }, [mealsWithTotals]);\n\n  const addAnotherMeal = () => {\n    setMeals((prev) => [...prev, createNewMeal()]);\n  };\n\n  const removeMeal = (index) => {\n    setMeals((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  /** 🔹 Handle order submission */\n  const handleSubmitOrder = async () => {\n    for (const meal of mealsWithTotals) {\n      if (!meal.mainMeal || !meal.portion) {\n        toast({\n          title: \"Incomplete Order\",\n          description: \"Please select main meal and portion for all meals.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setLoading(true);\n    try {\n      const allOrders = JSON.parse(\n        localStorage.getItem(\"quickmeal_orders\") || \"[]\"\n      );\n      const orderNumber = `QM${Date.now().toString().slice(-6)}`;\n\n      const newOrder = {\n        id: Date.now().toString(),\n        orderNumber,\n        customerId: user.id,\n        customerName: user.username,\n        storeId: store.id,\n        storeName: store.storeName,\n        meals: mealsWithTotals,\n        total: calculatedOrderTotal,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n      };\n\n      allOrders.push(newOrder);\n      localStorage.setItem(\"quickmeal_orders\", JSON.stringify(allOrders));\n      toast({\n        title: \"Order Placed!\",\n        description: `Your order #${orderNumber} has been submitted successfully`,\n      });\n      navigate(`/receipt/${newOrder.id}`);\n    } catch {\n      toast({\n        title: \"Order Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!store || !storeSettings || !merchantConfig) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        Loading...\n      </div>\n    );\n  }\n\n  /** 🔹 Config values */\n  const mainMeals = merchantConfig.mainMeals || merchantConfig.mains || [];\n  const portions = merchantConfig.portions || [];\n  const vegCurries = merchantConfig.curries?.filter((c) => c.type === \"veg\") || [];\n  const nonVegCurries =\n    merchantConfig.curries?.filter((c) => c.type === \"nonveg\") || [];\n  const gravies = merchantConfig.gravies || [];\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <Helmet>\n        <title>Order from {store.storeName} - QuickMeal</title>\n        <meta\n          name=\"description\"\n          content={`Place your pre-order at ${store.storeName} and skip the queue.`}\n        />\n      </Helmet>\n\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link\n            to=\"/customer\"\n            className=\"inline-flex items-center text-orange-600 hover:text-orange-700 mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Link>\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl font-bold gradient-text mb-2\">\n              {store.storeName}\n            </h1>\n            <p className=\"text-gray-600\">{store.storeAddress}</p>\n          </motion.div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Left: Meals */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {mealsWithTotals.map((meal, index) => (\n              <div\n                key={meal.id}\n                className=\"p-4 border-2 border-dashed rounded-lg space-y-6 relative\"\n              >\n                {meals.length > 1 && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => removeMeal(index)}\n                  >\n                    Remove Meal\n                  </Button>\n                )}\n\n                <h2 className=\"text-2xl font-bold text-gray-700\">\n                  Meal #{index + 1}\n                </h2>\n\n                {/* Main Meals */}\n                <div>\n                  <h3 className=\"font-semibold\">Main Meal</h3>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    {mainMeals.map((m) => (\n                      <label key={m.id} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"radio\"\n                          name={`mainMeal-${meal.id}`}\n                          value={m.id}\n                          checked={meal.mainMeal === m.id}\n                          onChange={() => updateMeal(index, { mainMeal: m.id })}\n                        />\n                        <span>\n                          {m.name}\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Portions */}\n                <div>\n                  <h3 className=\"font-semibold\">Portion Category</h3>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    {portions.map((p) => (\n                      <label key={p.id} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"radio\"\n                          name={`portion-${meal.id}`}\n                          value={p.id}\n                          checked={meal.portion === p.id}\n                          onChange={() => updateMeal(index, { portion: p.id })}\n                        />\n                        <span>\n                          {p.name}\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Veg Curries */}\n                <div>\n                  <label className=\"block font-medium\">Veg Curries</label>\n                  <p className=\"text-sm text-gray-500\">\n                    First {merchantConfig?.defaultVegCount || 0} veg curries are\n                    free. Extra curries cost ${merchantConfig?.extraVegPrice || 0}{\" \"}\n                    each.\n                  </p>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    {vegCurries.map((curry) => (\n                      <label key={curry.id} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={meal.vegCurries.includes(curry.id)}\n                          onChange={() => {\n                            const selected = meal.vegCurries.includes(curry.id);\n                            const updated = selected\n                              ? meal.vegCurries.filter((id) => id !== curry.id)\n                              : [...meal.vegCurries, curry.id];\n                            updateMeal(index, { vegCurries: updated });\n                          }}\n                        />\n                        {curry.name}\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Non-Veg Curries */}\n                <div>\n                  <label className=\"block font-medium\">Non-Veg Curries</label>\n                  <div className=\"space-y-2\">\n                    {nonVegCurries.map((curry) => {\n                      const existing = meal.nonVegCurries.find(\n                        (nv) => nv.id === curry.id\n                      );\n                      return (\n                        <div key={curry.id} className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={!!existing}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                updateMeal(index, {\n                                  nonVegCurries: [\n                                    ...meal.nonVegCurries,\n                                    curry.divisible \n                                      ? { id: curry.id, pieces: 1 }\n                                      : { id: curry.id },\n                                  ],\n                                });\n                              } else {\n                                updateMeal(index, {\n                                  nonVegCurries: meal.nonVegCurries.filter(\n                                    (nv) => nv.id !== curry.id\n                                  ),\n                                });\n                              }\n                            }}\n                          />\n                          <span>{curry.name}</span>\n                          {existing && curry.divisible && (\n                            <input\n                              type=\"number\"\n                              min={1}\n                              value={existing.pieces}\n                              onChange={(e) => {\n                                const updated = meal.nonVegCurries.map((nv) =>\n                                  nv.id === curry.id\n                                    ? {\n                                        ...nv,\n                                        pieces: parseInt(e.target.value || 1),\n                                      }\n                                    : nv\n                                );\n                                updateMeal(index, { nonVegCurries: updated });\n                              }}\n                              className=\"border rounded w-16 px-1\"\n                            />\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Gravies */}\n                <div>\n                  <label className=\"block font-medium\">Gravies</label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {gravies.map((gravy) => (\n                      <label key={gravy.id} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={meal.gravies.includes(gravy.id)}\n                          onChange={() => {\n                            const selected = meal.gravies.includes(gravy.id);\n                            const updated = selected\n                              ? meal.gravies.filter((id) => id !== gravy.id)\n                              : [...meal.gravies, gravy.id];\n                            updateMeal(index, { gravies: updated });\n                          }}\n                        />\n                        {gravy.name}\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Meal total */}\n                <div className=\"text-right font-bold\">\n                  Total: ${meal.total.toFixed(2)}\n                </div>\n              </div>\n            ))}\n\n            <Button\n              variant=\"outline\"\n              onClick={addAnotherMeal}\n              className=\"w-full py-6 text-lg\"\n            >\n              <PlusCircle className=\"mr-2 h-5 w-5\" /> Add Another Meal\n            </Button>\n          </div>\n\n          {/* Right: Summary */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"p-4 border rounded-lg space-y-4\">\n              <h3 className=\"text-xl font-bold\">Order Summary</h3>\n              {mealsWithTotals.map((meal, i) => {\n                const main = mainMeals.find((m) => m.id === meal.mainMeal);\n                const portion = portions.find((p) => p.id === meal.portion);\n\n                const vegNames = meal.vegCurries\n                  .map(\n                    (id) => merchantConfig.curries.find((c) => c.id === id)?.name\n                  )\n                  .filter(Boolean);\n\n                const nonVegNames = meal.nonVegCurries\n                  .map((nv) => {\n                    const curry = merchantConfig.curries.find(\n                      (c) => c.id === nv.id\n                    );\n                    if (!curry) return null;\n                    if (curry.divisible) {\n                      return `${curry.name} (${nv.pieces} pcs)`;\n                    } else {\n                      return nv.extraPieces && nv.extraPieces > 0\n                        ? `${curry.name} (+${nv.extraPieces} extra)`\n                        : curry.name;\n                    }\n                  })\n                  .filter(Boolean);\n\n                const gravyNames = meal.gravies\n                  .map(\n                    (id) =>\n                      merchantConfig.gravies.find((g) => g.id === id)?.name\n                  )\n                  .filter(Boolean);\n\n                return (\n                  <div key={meal.id} className=\"border-b pb-2 mb-2\">\n                    <div className=\"font-medium\">Meal #{i + 1}</div>\n                    <div>\n                      {main?.name || \"No main\"} ({portion?.name || \"No portion\"})\n                    </div>\n                    {vegNames.length > 0 && (\n                      <div>Veg Curries: {vegNames.join(\", \")}</div>\n                    )}\n                    {nonVegNames.length > 0 && (\n                      <div>Non-Veg Curries: {nonVegNames.join(\", \")}</div>\n                    )}\n                    {gravyNames.length > 0 && (\n                      <div>Gravies: {gravyNames.join(\", \")}</div>\n                    )}\n                    <div className=\"font-bold\">\n                      Total: ${meal.total.toFixed(2)}\n                    </div>\n                  </div>\n                );\n              })}\n\n              <div className=\"text-lg font-bold\">\n                Order Total: ${calculatedOrderTotal.toFixed(2)}\n              </div>\n              <Button\n                onClick={handleSubmitOrder}\n                disabled={loading}\n                className=\"w-full py-4 text-lg\"\n              >\n                {loading ? \"Placing Order...\" : \"Place Order\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderPage;\n","size_bytes":17531},"src/pages/ReceiptPage.jsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport {\n  ArrowLeft,\n  Receipt,\n  Clock,\n  CheckCircle,\n  MapPin,\n  CheckCheck,\n} from \"lucide-react\";\n\nconst ReceiptPage = () => {\n  const { orderId } = useParams();\n  const [order, setOrder] = useState(null);\n  const [store, setStore] = useState(null);\n  const [storeSettings, setStoreSettings] = useState(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const loadOrder = () => {\n    const allOrders = JSON.parse(localStorage.getItem(\"quickmeal_orders\") || \"[]\");\n    const foundOrder = allOrders.find(\n      (o) => o.id === orderId && o.customerId === user.id\n    );\n\n    if (!foundOrder) {\n      toast({\n        title: \"Order Not Found\",\n        description: \"The requested order could not be found\",\n        variant: \"destructive\",\n      });\n      navigate(\"/customer\");\n      return;\n    }\n\n    const users = JSON.parse(localStorage.getItem(\"quickmeal_users\") || \"[]\");\n    const merchant = users.find((u) => u.id === foundOrder.storeId);\n\n    const settings = JSON.parse(\n      localStorage.getItem(\"quickmeal_store_settings\") || \"{}\"\n    );\n    const currentStoreSettings = settings[foundOrder.storeId];\n\n    setOrder(foundOrder);\n    setStore(merchant);\n    setStoreSettings(currentStoreSettings);\n  };\n\n  useEffect(() => {\n    if (!user || user.role !== \"customer\") {\n      navigate(\"/login\");\n      return;\n    }\n    loadOrder();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orderId, user, navigate]);\n\n  const handleMarkAsDone = () => {\n    const allOrders = JSON.parse(localStorage.getItem(\"quickmeal_orders\") || \"[]\");\n    const updatedOrders = allOrders.map((o) =>\n      o.id === orderId ? { ...o, status: \"collected\" } : o\n    );\n    localStorage.setItem(\"quickmeal_orders\", JSON.stringify(updatedOrders));\n    loadOrder();\n    toast({\n      title: \"Order Collected!\",\n      description: \"Thank you for confirming. Enjoy your meal!\",\n    });\n  };\n\n  const getStatusInfo = (status) => {\n    const statusMap = {\n      pending: {\n        label: \"Order Received\",\n        color: \"secondary\",\n        description:\n          \"Your order has been received and is waiting to be prepared\",\n        icon: Clock,\n      },\n      preparing: {\n        label: \"Preparing\",\n        color: \"default\",\n        description: \"Your meal is being prepared with care\",\n        icon: Clock,\n      },\n      ready: {\n        label: \"Ready for Pickup\",\n        color: \"default\",\n        description:\n          \"Your order is ready! Please come to the store to collect it\",\n        icon: CheckCircle,\n      },\n      completed: {\n        label: \"Completed\",\n        color: \"default\",\n        description: \"Your order is ready for pickup!\",\n        icon: CheckCircle,\n      },\n      collected: {\n        label: \"Collected\",\n        color: \"success\",\n        description: \"You have collected your order. Enjoy!\",\n        icon: CheckCheck,\n      },\n    };\n    return statusMap[status] || statusMap.pending;\n  };\n\n  if (!order || !store) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        Loading...\n      </div>\n    );\n  }\n\n  const statusInfo = getStatusInfo(order.status);\n  const StatusIcon = statusInfo.icon;\n  const isMultiMeal = Array.isArray(order.meals);\n\n  const getNameById = (list, id) =>\n    list?.find((item) => item.id === id)?.name || id;\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <Helmet>\n        <title>Order Receipt #{order.orderNumber} - QuickMeal</title>\n        <meta\n          name=\"description\"\n          content={`Your order receipt from ${store.storeName}. Track your meal preparation status.`}\n        />\n      </Helmet>\n\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link\n            to=\"/customer\"\n            className=\"inline-flex items-center text-orange-600 hover:text-orange-700 mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Link>\n        </div>\n\n        {/* Receipt Card */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"order-card shadow-2xl\">\n            <CardHeader className=\"text-center border-b\">\n              <div className=\"flex justify-center mb-4\">\n                <Receipt className=\"w-16 h-16 text-orange-500\" />\n              </div>\n              <CardTitle className=\"text-3xl font-bold gradient-text\">\n                Order Receipt\n              </CardTitle>\n              <CardDescription className=\"text-lg\">\n                Order #{order.orderNumber}\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6 p-8\">\n              {/* Status */}\n              <div className=\"text-center p-6 bg-gradient-to-r from-orange-50 to-amber-50 rounded-lg\">\n                <StatusIcon className=\"w-12 h-12 mx-auto mb-3 text-orange-500\" />\n                <Badge\n                  variant={statusInfo.color}\n                  className=\"text-lg px-4 py-2 mb-3\"\n                >\n                  {statusInfo.label}\n                </Badge>\n                <p className=\"text-gray-600\">{statusInfo.description}</p>\n              </div>\n\n              {/* Store Information */}\n              <div className=\"border-b pb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-gray-800\">\n                  Restaurant Details\n                </h3>\n                <div className=\"space-y-2\">\n                  <p className=\"font-semibold text-lg\">{store.storeName}</p>\n                  <div className=\"flex items-center text-gray-600\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    {store.storeAddress}\n                  </div>\n                </div>\n              </div>\n\n              {/* Order Details */}\n              <div className=\"border-b pb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-gray-800\">\n                  Order Details\n                </h3>\n                {isMultiMeal ? (\n                  order.meals.map((meal, index) => (\n                    <div\n                      key={index}\n                      className=\"space-y-2 mb-4 pb-4 border-b last:border-b-0 last:pb-0 last:mb-0\"\n                    >\n                      <h4 className=\"font-bold\">Meal #{index + 1}</h4>\n                      <div>\n                        <strong>Main Meal:</strong>{\" \"}\n                        {getNameById(storeSettings?.mainMeals, meal.mainMeal)}\n                      </div>\n                      <div>\n                        <strong>Portion:</strong>{\" \"}\n                        {getNameById(\n                          storeSettings?.portionCategories,\n                          meal.portion\n                        )}\n                      </div>\n                      <div>\n                        <strong>Veg Curries:</strong>{\" \"}\n                        {meal.vegCurries.length > 0\n                          ? meal.vegCurries\n                              .map((id) =>\n                                getNameById(storeSettings?.curries, id)\n                              )\n                              .join(\", \")\n                          : \"None\"}\n                      </div>\n                      <div>\n                        <strong>Non-Veg Curries:</strong>{\" \"}\n                        {meal.nonVegCurries.length > 0\n                          ? meal.nonVegCurries\n                              .map((nv) => {\n                                const curry = storeSettings?.curries?.find(\n                                  (c) => c.id === nv.id\n                                );\n                                if (!curry) return nv.id;\n                                if (curry.divisible) {\n                                  return `${curry.name} (${nv.pieces} pcs)`;\n                                } else {\n                                  return nv.extraPieces && nv.extraPieces > 0\n                                    ? `${curry.name} (+${nv.extraPieces} extra)`\n                                    : curry.name;\n                                }\n                              })\n                              .join(\", \")\n                          : \"None\"}\n                      </div>\n                      <div>\n                        <strong>Gravies:</strong>{\" \"}\n                        {meal.gravies.length > 0\n                          ? meal.gravies\n                              .map((id) =>\n                                getNameById(storeSettings?.gravies, id)\n                              )\n                              .join(\", \")\n                          : \"None\"}\n                      </div>\n                      <div className=\"flex justify-end font-semibold pt-2\">\n                        <span>Subtotal: ${meal.total.toFixed(2)}</span>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"space-y-2\">\n                    <div>\n                      <strong>Main Meal:</strong>{\" \"}\n                      {getNameById(storeSettings?.mainMeals, order.mainMeal)}\n                    </div>\n                    <div>\n                      <strong>Portion:</strong>{\" \"}\n                      {getNameById(storeSettings?.portionCategories, order.portion)}\n                    </div>\n                    <div>\n                      <strong>Veg Curries:</strong>{\" \"}\n                      {order.vegCurries?.length > 0\n                        ? order.vegCurries\n                            .map((id) => getNameById(storeSettings?.curries, id))\n                            .join(\", \")\n                        : \"None\"}\n                    </div>\n                    <div>\n                      <strong>Non-Veg Curries:</strong>{\" \"}\n                      {order.nonVegCurries?.length > 0\n                        ? order.nonVegCurries\n                            .map((nv) => {\n                              const curry = storeSettings?.curries?.find(\n                                (c) => c.id === nv.id\n                              );\n                              if (!curry) return nv.id;\n                              if (curry.divisible) {\n                                return `${curry.name} (${nv.pieces} pcs)`;\n                              } else {\n                                return nv.extraPieces && nv.extraPieces > 0\n                                  ? `${curry.name} (+${nv.extraPieces} extra)`\n                                  : curry.name;\n                              }\n                            })\n                            .join(\", \")\n                        : \"None\"}\n                    </div>\n                    <div>\n                      <strong>Gravies:</strong>{\" \"}\n                      {order.gravies?.length > 0\n                        ? order.gravies\n                            .map((id) => getNameById(storeSettings?.gravies, id))\n                            .join(\", \")\n                        : \"None\"}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Payment Summary */}\n              <div className=\"border-b pb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-gray-800\">\n                  Payment Summary\n                </h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-2xl font-bold text-orange-600\">\n                    <span>Total Paid:</span>\n                    <span>${order.total.toFixed(2)}</span>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">\n                    Payment processed successfully\n                  </p>\n                </div>\n              </div>\n\n              {/* Order Information */}\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>\n                  <strong>Order Date:</strong>{\" \"}\n                  {new Date(order.createdAt).toLocaleString()}\n                </p>\n                <p>\n                  <strong>Customer:</strong> {order.customerName}\n                </p>\n                <p>\n                  <strong>Status:</strong> {statusInfo.label}\n                </p>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4 pt-6\">\n                {order.status === \"completed\" ? (\n                  <Button\n                    onClick={handleMarkAsDone}\n                    className=\"flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white\"\n                  >\n                    <CheckCheck className=\"w-5 h-5 mr-2\" /> Mark as Done\n                  </Button>\n                ) : (\n                  <Link to=\"/customer\" className=\"flex-1\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-orange-300 text-orange-600 hover:bg-orange-50\"\n                    >\n                      Back to Dashboard\n                    </Button>\n                  </Link>\n                )}\n                <Button\n                  onClick={() => window.print()}\n                  className=\"flex-1 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white\"\n                >\n                  Print Receipt\n                </Button>\n              </div>\n\n              {/* Important Notes */}\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-800 mb-2\">\n                  Important Notes:\n                </h4>\n                <ul className=\"text-sm text-blue-700 space-y-1\">\n                  <li>• Please bring this receipt when collecting your order</li>\n                  <li>• Orders are typically ready within 15-20 minutes</li>\n                  <li>• Contact the restaurant if you have any questions</li>\n                </ul>\n              </div>\n\n              {order.status === \"ready\" && (\n                <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                  <h4 className=\"font-bold text-green-800 text-lg mb-2\">\n                    🎉 Your Order is Ready!\n                  </h4>\n                  <p className=\"text-green-700\">\n                    Please visit the restaurant to collect your delicious meal!\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReceiptPage;\n","size_bytes":15192},"src/pages/RegisterPage.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/use-toast';\nimport { ChefHat, ArrowLeft } from 'lucide-react';\n\nconst GoogleIcon = (props) => (\n  <svg viewBox=\"0 0 48 48\" {...props}>\n    <path fill=\"#FFC107\" d=\"M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z\"></path>\n    <path fill=\"#FF3D00\" d=\"M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z\"></path>\n    <path fill=\"#4CAF50\" d=\"M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z\"></path>\n    <path fill=\"#1976D2\" d=\"M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571l6.19,5.238C43.021,36.251,44,34,44,30C44,22.659,43.862,21.35,43.611,20.083z\"></path>\n  </svg>\n);\n\nconst RegisterPage = () => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: '',\n    storeName: '',\n    storeAddress: '',\n    university: null // Change initial state to null\n  });\n  const [universities, setUniversities] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const storedUniversities = JSON.parse(localStorage.getItem('quickmeal_universities') || '[]');\n    setUniversities(storedUniversities);\n  }, []);\n\n  const handleGoogleSignup = () => {\n    toast({\n      title: 'Coming Soon!',\n      description: '🚧 This feature isn\\'t implemented yet—but don\\'t worry! You can request it in your next prompt! 🚀',\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      if (formData.password !== formData.confirmPassword) {\n        toast({ title: 'Password Mismatch', description: 'Passwords do not match', variant: 'destructive' });\n        return;\n      }\n\n      const users = JSON.parse(localStorage.getItem('quickmeal_users') || '[]');\n      const existingUserByEmail = users.find(u => u.email === formData.email);\n      const existingUserByUsername = users.find(u => u.username === formData.username);\n\n      if (existingUserByEmail) {\n        toast({ title: 'Email Already Exists', description: 'An account with this email already exists', variant: 'destructive' });\n        return;\n      }\n      \n      if (existingUserByUsername) {\n        toast({ title: 'Username Already Exists', description: 'An account with this username already exists', variant: 'destructive' });\n        return;\n      }\n\n      const userData = {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password,\n        role: formData.role,\n        ...(formData.role === 'customer' && { university: formData.university }), // university can be null\n        ...(formData.role === 'merchant' && {\n          storeName: formData.storeName,\n          storeAddress: formData.storeAddress\n        })\n      };\n\n      register(userData);\n\n      if (formData.role === 'customer') {\n        toast({ title: 'Account Created!', description: 'Welcome to QuickMeal!' });\n        navigate('/customer');\n      } else if (formData.role === 'merchant') {\n        toast({ title: 'Registration Submitted', description: 'Your merchant account is pending admin approval.' });\n        navigate('/login');\n      }\n    } catch (error) {\n      toast({ title: 'Registration Failed', description: 'Something went wrong. Please try again.', variant: 'destructive' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  const handleSelectChange = (name, value) => {\n    setFormData(prev => ({ ...prev, [name]: value === \"null\" ? null : value })); // Convert \"null\" string back to actual null\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <Helmet>\n        <title>Sign Up - QuickMeal</title>\n        <meta name=\"description\" content=\"Create your QuickMeal account and start pre-ordering meals or register your restaurant.\" />\n        <meta property=\"og:title\" content=\"Sign Up - QuickMeal\" />\n        <meta property=\"og:description\" content=\"Create your QuickMeal account and start pre-ordering meals or register your restaurant.\" />\n      </Helmet>\n\n      <div className=\"w-full max-w-md\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Link to=\"/\" className=\"inline-flex items-center text-orange-600 hover:text-orange-700 mb-6 transition-colors\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n\n          <Card className=\"meal-card shadow-2xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <ChefHat className=\"w-12 h-12 text-orange-500\" />\n              </div>\n              <CardTitle className=\"text-3xl font-bold gradient-text\">Join QuickMeal</CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                Create your account to get started\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input id=\"username\" name=\"username\" value={formData.username} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" name=\"email\" type=\"email\" value={formData.email} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Account Type</Label>\n                  <Select onValueChange={(value) => handleSelectChange('role', value)} required>\n                    <SelectTrigger className=\"border-orange-200 focus:border-orange-400\">\n                      <SelectValue placeholder=\"Select account type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"customer\">Customer</SelectItem>\n                      <SelectItem value=\"merchant\">Restaurant Owner</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {formData.role === 'customer' && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"university\">University (Optional)</Label>\n                    <Select value={formData.university === null ? \"null\" : formData.university} onValueChange={(value) => handleSelectChange('university', value)}>\n                      <SelectTrigger className=\"border-orange-200 focus:border-orange-400\">\n                        <SelectValue placeholder=\"Select your university\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"null\">None</SelectItem>\n                        {universities.map(uni => (\n                          <SelectItem key={uni.id} value={uni.name}>{uni.name}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                {formData.role === 'merchant' && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"storeName\">Restaurant Name</Label>\n                      <Input id=\"storeName\" name=\"storeName\" value={formData.storeName} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"storeAddress\">Restaurant Address</Label>\n                      <Input id=\"storeAddress\" name=\"storeAddress\" value={formData.storeAddress} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                    </div>\n                  </>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input id=\"password\" name=\"password\" type=\"password\" value={formData.password} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" value={formData.confirmPassword} onChange={handleChange} required className=\"border-orange-200 focus:border-orange-400\" />\n                </div>\n\n                <Button type=\"submit\" className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white py-3\" disabled={loading}>\n                  {loading ? 'Creating Account...' : 'Create Account'}\n                </Button>\n              </form>\n\n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\"><span className=\"w-full border-t\" /></div>\n                <div className=\"relative flex justify-center text-xs uppercase\"><span className=\"bg-white/95 px-2 text-gray-500\">Or continue with</span></div>\n              </div>\n\n              <Button variant=\"outline\" className=\"w-full\" onClick={handleGoogleSignup}>\n                <GoogleIcon className=\"mr-2 h-4 w-4\" />\n                Sign up with Google\n              </Button>\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-600\">\n                  Already have an account?{' '}\n                  <Link to=\"/login\" className=\"text-orange-600 hover:text-orange-700 font-semibold\">\n                    Sign in here\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;","size_bytes":11304},"src/store/merchantConfig.jsx":{"content":"// src/store/merchantConfig.jsx\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst MerchantConfigContext = createContext();\n\nconst defaultConfig = {\n  mealTimes: [\"Breakfast\", \"Lunch\", \"Dinner\"],\n  activeMealTime: \"Lunch\",\n  defaultVegCount: 2,\n  extraVegPrice: 50,\n\n  // ✅ Universities\n  availableUniversities: [\n    { id: \"uoc\", name: \"University of Colombo\" },\n    { id: \"uok\", name: \"University of Kelaniya\" },\n    { id: \"uom\", name: \"University of Moratuwa\" },\n    { id: \"ousl\", name: \"Open University of Sri Lanka\" },\n  ],\n  universities: [], // merchant-selected\n\n  // ✅ Portion categories\n  portions: [\n    { id: nanoid(), name: \"Full\", multiplier: 1 },\n    { id: nanoid(), name: \"Half\", multiplier: 0.5 },\n    { id: nanoid(), name: \"Small\", multiplier: 0.3 },\n  ],\n\n  // ✅ Main Meals\n  mains: [\n    {\n      id: nanoid(),\n      name: \"Rice & Curry\",\n      prices: {},\n      available: true,\n    },\n  ],\n\n  // ✅ Curries\n  curries: [\n    {\n      id: nanoid(),\n      name: \"Potato Curry\",\n      type: \"veg\",\n      available: true,\n    },\n    {\n      id: nanoid(),\n      name: \"Fish Curry\",\n      type: \"nonveg\",\n      available: true,\n      divisible: true,\n      prices: {},\n      extraPiecePrice: 40,\n    },\n  ],\n};\n\nexport const MerchantConfigProvider = ({ children }) => {\n  const [config, setConfig] = useState(() => {\n    const saved = localStorage.getItem(\"merchantConfig\");\n    return saved ? JSON.parse(saved) : defaultConfig;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"merchantConfig\", JSON.stringify(config));\n  }, [config]);\n\n  return (\n    <MerchantConfigContext.Provider value={{ config, setConfig }}>\n      {children}\n    </MerchantConfigContext.Provider>\n  );\n};\n\nexport const useMerchantConfig = () => useContext(MerchantConfigContext);\n","size_bytes":1845},"src/utils/demoData.js":{"content":"// Initialize demo data for the application\nexport const initializeDemoData = () => {\n  // Check if demo data already exists\n  const existingUsers = localStorage.getItem('quickmeal_users');\n  \n  if (!existingUsers) {\n    // Create demo users\n    const demoUsers = [\n      {\n        id: 'admin-1',\n        name: 'Admin User',\n        email: 'admin@quickmeal.com',\n        password: 'admin123',\n        role: 'admin',\n        approved: true,\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'customer-1',\n        name: 'John Customer',\n        email: 'customer@test.com',\n        password: 'customer123',\n        role: 'customer',\n        approved: true,\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'merchant-1',\n        name: 'Restaurant Owner',\n        email: 'merchant@test.com',\n        password: 'merchant123',\n        role: 'merchant',\n        storeName: 'Spice Garden Restaurant',\n        storeAddress: '123 Main Street, Food District',\n        approved: true,\n        createdAt: new Date().toISOString()\n      }\n    ];\n\n    localStorage.setItem('quickmeal_users', JSON.stringify(demoUsers));\n\n    // Create demo store settings\n    const demoStoreSettings = {\n      'merchant-1': {\n        isOpen: true,\n        acceptingOrders: true,\n        orderLimit: 50,\n        closingTime: '22:00',\n        menuItems: {\n          rice: { available: true, price: 8.99 },\n          vegCurry: { available: true, price: 6.99 },\n          chickenCurry: { available: true, price: 9.99 },\n          fishCurry: { available: true, price: 11.99 },\n          eggCurry: { available: true, price: 7.99 },\n          extraChicken: { available: true, price: 3.99 },\n          extraFish: { available: true, price: 4.99 }\n        }\n      }\n    };\n\n    localStorage.setItem('quickmeal_store_settings', JSON.stringify(demoStoreSettings));\n\n    // Create demo merchant config with proper pricing\n    const demoMerchantConfig = {\n      mealTimes: [\"Breakfast\", \"Lunch\", \"Dinner\"],\n      activeMealTime: \"Lunch\",\n      defaultVegCount: 2,\n      extraVegPrice: 50,\n      \n      // Portions\n      portions: [\n        { id: \"full\", name: \"Full\", multiplier: 1 },\n        { id: \"half\", name: \"Half\", multiplier: 0.5 },\n        { id: \"small\", name: \"Small\", multiplier: 0.3 },\n      ],\n      \n      // Main meals with portion-based pricing\n      mains: [\n        {\n          id: \"rice-curry\",\n          name: \"Rice & Curry\",\n          prices: {\n            full: 300,\n            half: 200, \n            small: 150\n          },\n          available: true,\n        },\n      ],\n      \n      // Curries with pricing\n      curries: [\n        {\n          id: \"potato-curry\",\n          name: \"Potato Curry\",\n          type: \"veg\",\n          available: true,\n        },\n        {\n          id: \"fish-curry\",\n          name: \"Fish Curry\",\n          type: \"nonveg\",\n          available: true,\n          divisible: true,\n          prices: {\n            full: 120,\n            half: 80,\n            small: 60\n          },\n          extraPiecePrice: 40,\n        },\n      ],\n      \n      gravies: []\n    };\n\n    localStorage.setItem('merchantConfig', JSON.stringify(demoMerchantConfig));\n  }\n\n  // Always ensure merchantConfig has proper pricing (even if users exist)\n  const existingMerchantConfig = localStorage.getItem('merchantConfig');\n  if (!existingMerchantConfig) {\n    const demoMerchantConfig = {\n      mealTimes: [\"Breakfast\", \"Lunch\", \"Dinner\"],\n      activeMealTime: \"Lunch\",\n      defaultVegCount: 2,\n      extraVegPrice: 50,\n      \n      // Portions\n      portions: [\n        { id: \"full\", name: \"Full\", multiplier: 1 },\n        { id: \"half\", name: \"Half\", multiplier: 0.5 },\n        { id: \"small\", name: \"Small\", multiplier: 0.3 },\n      ],\n      \n      // Main meals with portion-based pricing\n      mains: [\n        {\n          id: \"rice-curry\",\n          name: \"Rice & Curry\",\n          prices: {\n            full: 300,\n            half: 200, \n            small: 150\n          },\n          available: true,\n        },\n      ],\n      \n      // Curries with pricing\n      curries: [\n        {\n          id: \"potato-curry\",\n          name: \"Potato Curry\",\n          type: \"veg\",\n          available: true,\n        },\n        {\n          id: \"fish-curry\",\n          name: \"Fish Curry\",\n          type: \"nonveg\",\n          available: true,\n          divisible: true,\n          prices: {\n            full: 120,\n            half: 80,\n            small: 60\n          },\n          extraPiecePrice: 40,\n        },\n      ],\n      \n      gravies: []\n    };\n\n    localStorage.setItem('merchantConfig', JSON.stringify(demoMerchantConfig));\n  }\n\n  if (!existingUsers) {\n    // Create demo orders\n    const demoOrders = [\n      {\n        id: 'order-1',\n        orderNumber: 'QM123456',\n        customerId: 'customer-1',\n        customerName: 'John Customer',\n        storeId: 'merchant-1',\n        storeName: 'Spice Garden Restaurant',\n        mealType: 'Chicken',\n        curries: ['Chicken Curry', 'Vegetable Curry', 'Egg Curry'],\n        extras: [\n          { item: 'Extra Chicken Piece', quantity: 1, price: 3.99 }\n        ],\n        total: 19.98,\n        status: 'ready',\n        createdAt: new Date(Date.now() - 30 * 60 * 1000).toISOString() // 30 minutes ago\n      }\n    ];\n\n    localStorage.setItem('quickmeal_orders', JSON.stringify(demoOrders));\n  }\n};","size_bytes":5371},"src/utils/pricingEngine.js":{"content":"// src/utils/pricingEngine.js\n\n/**\n * Resolve portion data from meal and store settings\n */\nconst resolvePortion = (meal, storeSettings) => {\n  const portionCategories = storeSettings?.portionCategories || storeSettings?.portions || [];\n  return portionCategories.find((p) => p.id === meal.portion);\n};\n\n/**\n * Get price for a curry based on portion\n */\nconst priceForCurry = (curry, portionId) => {\n  if (!curry || !curry.prices) return 0;\n  return parseFloat(curry.prices[portionId] || 0);\n};\n\n/**\n * Select base non-veg curry using priority rules\n * Returns { baseCurry, basePrice, otherNonVeg }\n */\nconst pickBaseNonVeg = (nonVegCurries, storeSettings, portionId) => {\n  if (!nonVegCurries?.length) return null;\n\n  const curriesWithData = nonVegCurries.map(nv => {\n    const curry = storeSettings.curries?.find(c => c.id === nv.id);\n    return curry ? { ...nv, curry, price: priceForCurry(curry, portionId) } : null;\n  }).filter(Boolean).filter(nv => nv.curry.available !== false);\n\n  if (!curriesWithData.length) return null;\n\n  // Split into divisible and non-divisible\n  const nonDivisible = curriesWithData.filter(nv => !nv.curry.divisible);\n  const divisible = curriesWithData.filter(nv => nv.curry.divisible);\n\n  let baseCurry, basePrice, otherNonVeg;\n\n  if (nonDivisible.length === 1 && divisible.length === 0) {\n    // Single non-divisible curry\n    baseCurry = nonDivisible[0];\n    basePrice = baseCurry.price;\n    otherNonVeg = [];\n  } else if (nonDivisible.length >= 1) {\n    // Multiple non-veg with at least one non-divisible: pick most expensive non-divisible\n    baseCurry = nonDivisible.reduce((max, current) => \n      current.price > max.price ? current : max\n    );\n    basePrice = baseCurry.price;\n    otherNonVeg = curriesWithData.filter(nv => nv.id !== baseCurry.id);\n  } else {\n    // All divisible: pick most expensive divisible as base\n    baseCurry = divisible.reduce((max, current) => \n      current.price > max.price ? current : max\n    );\n    // For divisible curries, charge base portion price for the first serving\n    // Use extraPiecePrice for additional pieces beyond the first\n    const pieces = baseCurry.pieces || 1;\n    const extraPieces = Math.max(0, pieces - 1); // Extra pieces beyond the first\n    basePrice = baseCurry.price; // Base price for first serving\n    if (extraPieces > 0 && baseCurry.curry.extraPiecePrice) {\n      basePrice += parseFloat(baseCurry.curry.extraPiecePrice) * extraPieces; // Use extraPiecePrice for extra pieces\n    }\n    otherNonVeg = curriesWithData.filter(nv => nv.id !== baseCurry.id);\n  }\n\n  return { baseCurry, basePrice, otherNonVeg };\n};\n\n/**\n * Price additional non-veg curries (not the base)\n */\nconst priceOtherNonVeg = (otherNonVeg, storeSettings) => {\n  let total = 0;\n  const extraNonVegPrice = storeSettings?.extraNonVegAsExtraPrice ?? storeSettings?.extraVegPrice ?? 0;\n\n  otherNonVeg.forEach(nv => {\n    if (nv.curry.divisible) {\n      // Divisible: use extraPiecePrice for all pieces (no base price when not the main curry)\n      if (nv.curry.extraPiecePrice) {\n        total += parseFloat(nv.curry.extraPiecePrice) * (nv.pieces || 1);\n      } else {\n        // Fallback to portion price if no extraPiecePrice defined\n        total += nv.price * (nv.pieces || 1);\n      }\n    } else {\n      // Non-divisible: charge as \"extra curry\" + any extra pieces\n      total += parseFloat(extraNonVegPrice);\n      if (nv.extraPieces && nv.curry.extraPiecePrice) {\n        total += parseFloat(nv.curry.extraPiecePrice) * nv.extraPieces;\n      }\n    }\n  });\n\n  return total;\n};\n\n/**\n * Price extra pieces for base non-veg curry\n */\nconst priceBaseNonVegExtras = (baseCurry) => {\n  if (!baseCurry) return 0;\n  \n  if (baseCurry.curry.divisible) {\n    // For divisible base curry, extra pieces are already handled in pickBaseNonVeg\n    return 0;\n  } else {\n    // For non-divisible base curry, charge for extra pieces\n    if (baseCurry.extraPieces && baseCurry.curry.extraPiecePrice) {\n      return parseFloat(baseCurry.curry.extraPiecePrice) * baseCurry.extraPieces;\n    }\n  }\n  \n  return 0;\n};\n\n/**\n * Price veg curries (extra beyond free count)\n */\nconst priceVegExtras = (meal, storeSettings) => {\n  const freeVeg = storeSettings?.defaultVegCount ?? storeSettings?.defaultVegCurries ?? 0;\n  const extraVegPrice = storeSettings?.extraVegPrice ?? storeSettings?.vegCurryPrice ?? 0;\n  const vegCount = meal.vegCurries?.length || 0;\n\n  if (vegCount > freeVeg) {\n    const extraCount = vegCount - freeVeg;\n    return extraCount * parseFloat(extraVegPrice);\n  }\n  \n  return 0;\n};\n\n/**\n * Calculate meal price with complex non-veg priority rules\n * @param {Object} meal - The meal configuration\n * @param {Object} storeSettings - Store settings and pricing config\n * @returns {number} Total meal price\n */\nexport const calculateMealPrice = (meal, storeSettings) => {\n  let total = 0;\n\n  // Resolve portion once\n  const portion = resolvePortion(meal, storeSettings);\n  if (!portion) return 0;\n  \n  const portionId = portion.id;\n  const hasNonVeg = meal.nonVegCurries?.length > 0;\n\n  // --- 1. Base price logic ---\n  if (!hasNonVeg) {\n    // No non-veg: use main meal price as base\n    const mainMeals = storeSettings?.mainMeals || storeSettings?.mains || [];\n    const main = mainMeals.find((m) => m.id === meal.mainMeal);\n    \n    if (main && main.available !== false) {\n      const mainPrice = main.prices?.[portionId] || 0;\n      total += parseFloat(mainPrice);\n    }\n  } else {\n    // Has non-veg: ignore main meal price, use non-veg priority rules\n    const baseResult = pickBaseNonVeg(meal.nonVegCurries, storeSettings, portionId);\n    \n    if (baseResult) {\n      const { baseCurry, basePrice, otherNonVeg } = baseResult;\n      \n      // Add base non-veg price\n      total += basePrice;\n      \n      // Add extra pieces for base non-veg curry\n      total += priceBaseNonVegExtras(baseCurry);\n      \n      // Add other non-veg curries\n      total += priceOtherNonVeg(otherNonVeg, storeSettings);\n    }\n  }\n\n  // --- 2. Add veg curry extras ---\n  total += priceVegExtras(meal, storeSettings);\n\n  // --- 3. Gravies remain free ---\n  \n  return total;\n};","size_bytes":6126},"src/components/customer/AccountSettingsTab.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/use-toast';\nimport { Settings } from 'lucide-react';\n\nconst AccountSettingsTab = () => {\n  const { user, updateUser } = useAuth();\n  const { toast } = useToast();\n  const [universities, setUniversities] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    university: null // Change initial state to null\n  });\n\n  useEffect(() => {\n    const storedUniversities = JSON.parse(localStorage.getItem('quickmeal_universities') || '[]');\n    setUniversities(storedUniversities);\n    if (user) {\n      setFormData({\n        name: user.name,\n        email: user.email,\n        university: user.university || null // Initialize with null if university is empty\n      });\n    }\n  }, [user]);\n\n  const handleChange = (e) => {\n    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  const handleUniversityChange = (value) => {\n    setFormData(prev => ({ ...prev, university: value === \"null\" ? null : value })); // Convert \"null\" string back to actual null\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const updatedUserData = {\n      ...user,\n      name: formData.name,\n      university: formData.university // Will be null or selected university name\n    };\n    updateUser(updatedUserData);\n    toast({\n      title: 'Account Updated',\n      description: 'Your account details have been saved.'\n    });\n  };\n\n  return (\n    <Card className=\"store-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          Account Settings\n        </CardTitle>\n        <CardDescription>\n          Manage your personal information.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" name=\"name\" value={formData.name} onChange={handleChange} />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input id=\"email\" name=\"email\" value={formData.email} disabled />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"university\">University</Label>\n            <Select value={formData.university === null ? \"null\" : formData.university} onValueChange={handleUniversityChange}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select your university\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"null\">None</SelectItem>\n                {universities.map(uni => (\n                  <SelectItem key={uni.id} value={uni.name}>{uni.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <Button type=\"submit\" className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white\">\n            Save Changes\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AccountSettingsTab;","size_bytes":3591},"src/components/layout/MainLayout.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { ChefHat } from 'lucide-react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\n\nconst MainLayout = ({ children }) => {\n  return (\n    <div className=\"relative w-full h-full\">\n      <div\n        className=\"fixed inset-0 w-screen h-screen bg-cover bg-center bg-fixed -z-10\"\n        style={{ backgroundImage: `url('https://horizons-cdn.hostinger.com/e20413e9-d596-4a0b-b570-95741db9c5bd/44787bab6772b277d235a9a48a38dca7.jpg')` }}\n      />\n      <div className=\"absolute top-0 left-0 right-0 z-10\">\n        <header className=\"p-4\">\n            <div className=\"container mx-auto flex justify-between items-center\">\n                <div className=\"flex items-center gap-2 text-white\">\n                    <ChefHat className=\"w-8 h-8 text-orange-400\"/>\n                    <span className=\"text-2xl font-bold\">QuickMeal</span>\n                </div>\n            </div>\n        </header>\n      </div>\n      <main className=\"relative z-0\">\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default MainLayout;","size_bytes":1128},"src/components/layout/MerchantLayout.jsx":{"content":"// src/components/layout/MerchantLayout.jsx\nimport React from \"react\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\n\nconst MerchantLayout = ({ children }) => {\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto bg-white shadow rounded-2xl p-6\">\n        <Tabs defaultValue=\"dashboard\">\n          <TabsList className=\"flex space-x-4 border-b mb-6\">\n            <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"menu\">Menu & Pricing</TabsTrigger>\n            <TabsTrigger value=\"store\">Store Settings</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"dashboard\">{children}</TabsContent>\n          {/* You can mount menu & store pages here too if you want */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default MerchantLayout;\n","size_bytes":875},"src/components/merchant/DashboardHeader.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\n\nconst DashboardHeader = ({ storeName, onLogout }) => {\n  return (\n    <div className=\"flex justify-between items-center mb-8\">\n      <motion.div\n        initial={{ opacity: 0, x: -30 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <h1 className=\"text-4xl font-bold gradient-text\">{storeName}</h1>\n        <p className=\"text-gray-600 mt-2\">Manage your restaurant and orders</p>\n      </motion.div>\n      \n      <Button onClick={onLogout} variant=\"outline\" className=\"border-orange-300 text-orange-600 hover:bg-orange-50\">\n        <LogOut className=\"w-4 h-4 mr-2\" />\n        Logout\n      </Button>\n    </div>\n  );\n};\n\nexport default DashboardHeader;","size_bytes":852},"src/components/merchant/MenuTab.jsx":{"content":"import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { PlusCircle, Trash2 } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nconst MenuTab = ({ storeSettings, setStoreSettings, onSave }) => {\n  const { menuItems, curries, activeMealTime } = storeSettings;\n\n  const handleMenuItemChange = (item, field, value) => {\n    setStoreSettings(prev => ({\n      ...prev,\n      menuItems: {\n        ...prev.menuItems,\n        [item]: { ...prev.menuItems[item], [field]: value }\n      }\n    }));\n  };\n\n  const handleCurryChange = (id, field, value) => {\n    setStoreSettings(prev => ({\n      ...prev,\n      curries: prev.curries.map(curry =>\n        curry.id === id ? { ...curry, [field]: value } : curry\n      )\n    }));\n  };\n\n  const handleMealTimeChange = (value) => {\n    setStoreSettings(prev => ({ ...prev, activeMealTime: value }));\n  };\n\n  const addCurry = () => {\n    setStoreSettings(prev => ({\n      ...prev,\n      curries: [\n        ...prev.curries,\n        { id: uuidv4(), name: 'New Curry', available: true, price: 5.00 }\n      ]\n    }));\n  };\n\n  const removeCurry = (id) => {\n    setStoreSettings(prev => ({\n      ...prev,\n      curries: prev.curries.filter(curry => curry.id !== id)\n    }));\n  };\n\n  // ✅ Save handler that syncs mains with menuItems\n  const handleSave = () => {\n    const mains = Object.entries(storeSettings.menuItems || {}).map(([key, value]) => ({\n      id: key,\n      name: key.replace(/([A-Z])/g, \" $1\").trim(),\n      available: value.available,\n      prices: { default: value.price }, // extend later for portions\n    }));\n\n    const updatedSettings = {\n      ...storeSettings,\n      mains, // 👈 sync mains so OrderPage sees latest\n    };\n\n    setStoreSettings(updatedSettings);\n\n    // persist to localStorage\n    const allStoreSettings = JSON.parse(localStorage.getItem(\"quickmeal_store_settings\") || \"{}\");\n    allStoreSettings[storeSettings.storeId] = updatedSettings;\n    localStorage.setItem(\"quickmeal_store_settings\", JSON.stringify(allStoreSettings));\n\n    onSave && onSave(updatedSettings);\n  };\n\n  return (\n    <Card className=\"store-card\">\n      <CardHeader>\n        <CardTitle>Menu Items & Pricing</CardTitle>\n        <CardDescription>\n          Set the active menu and update availability and prices.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-8\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-gray-700\">Active Menu</h3>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"activeMealTime\">Set which meal this menu is for</Label>\n            <Select value={activeMealTime} onValueChange={handleMealTimeChange}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select a meal time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Breakfast\">Breakfast</SelectItem>\n                <SelectItem value=\"Lunch\">Lunch</SelectItem>\n                <SelectItem value=\"Dinner\">Dinner</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4 text-gray-700\">Main Items & Extras</h3>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {Object.entries(menuItems).map(([item, details]) => (\n              <div key={item} className=\"border rounded-lg p-4 bg-white/50\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-semibold capitalize\">\n                    {item.replace(/([A-Z])/g, ' $1').trim()}\n                  </h4>\n                  <label className=\"flex items-center space-x-2 cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={details.available}\n                      onChange={(e) => handleMenuItemChange(item, 'available', e.target.checked)}\n                      className=\"form-checkbox h-4 w-4 text-orange-600\"\n                    />\n                    <span>Available</span>\n                  </label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Label htmlFor={`price-${item}`}>Price:</Label>\n                  <Input\n                    id={`price-${item}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={details.price}\n                    onChange={(e) => handleMenuItemChange(item, 'price', parseFloat(e.target.value) || 0)}\n                    className=\"w-24\"\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-700\">Curries</h3>\n            <Button variant=\"outline\" size=\"sm\" onClick={addCurry}>\n              <PlusCircle className=\"w-4 h-4 mr-2\" />\n              Add Curry\n            </Button>\n          </div>\n          <div className=\"space-y-4\">\n            {curries.map((curry) => (\n              <div\n                key={curry.id}\n                className=\"grid grid-cols-1 md:grid-cols-12 gap-4 items-center border rounded-lg p-4 bg-white/50\"\n              >\n                <div className=\"md:col-span-5\">\n                  <Label htmlFor={`name-${curry.id}`}>Curry Name</Label>\n                  <Input\n                    id={`name-${curry.id}`}\n                    value={curry.name}\n                    onChange={(e) => handleCurryChange(curry.id, 'name', e.target.value)}\n                  />\n                </div>\n                <div className=\"md:col-span-3\">\n                  <Label htmlFor={`price-${curry.id}`}>Price</Label>\n                  <Input\n                    id={`price-${curry.id}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={curry.price}\n                    onChange={(e) => handleCurryChange(curry.id, 'price', parseFloat(e.target.value) || 0)}\n                  />\n                </div>\n                <div className=\"md:col-span-3 flex items-end h-full\">\n                  <label className=\"flex items-center space-x-2 cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={curry.available}\n                      onChange={(e) => handleCurryChange(curry.id, 'available', e.target.checked)}\n                      className=\"form-checkbox h-4 w-4 text-orange-600\"\n                    />\n                    <span>Available</span>\n                  </label>\n                </div>\n                <div className=\"md:col-span-1 flex items-end h-full\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => removeCurry(curry.id)}>\n                    <Trash2 className=\"w-4 h-4 text-red-500\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Button\n          onClick={handleSave}\n          className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white w-full\"\n        >\n          Save All Menu Changes\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MenuTab;\n","size_bytes":7590},"src/components/merchant/OrderDetailModal.jsx":{"content":"import React from 'react';\nimport {\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\nconst OrderDetailModal = ({ order, onUpdateStatus }) => {\n  if (!order) return null;\n\n  const isMultiMeal = Array.isArray(order.meals);\n\n  const getOrderStatusColor = (status) => {\n    const statusMap = {\n      pending: 'secondary',\n      completed: 'success',\n      canceled: 'destructive'\n    };\n    return statusMap[status] || 'secondary';\n  };\n\n  return (\n    <DialogContent className=\"sm:max-w-md\">\n      <DialogHeader>\n        <DialogTitle>Order #{order.orderNumber}</DialogTitle>\n        <DialogDescription>\n          Detailed view of the order placed by {order.customerName}.\n        </DialogDescription>\n      </DialogHeader>\n      <div className=\"space-y-4 max-h-[60vh] overflow-y-auto pr-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-semibold\">Status:</span>\n          <Badge variant={getOrderStatusColor(order.status)}>{order.status}</Badge>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-semibold\">Order Date:</span>\n          <span>{new Date(order.createdAt).toLocaleString()}</span>\n        </div>\n\n        <div className=\"border-t pt-4 mt-4\">\n          <h4 className=\"font-bold mb-2\">Order Items</h4>\n          {isMultiMeal ? (\n            order.meals.map((meal, index) => (\n              <div key={index} className=\"mb-4 p-3 border rounded-lg bg-gray-50/50\">\n                <h5 className=\"font-semibold\">Meal #{index + 1}: {meal.mealType}</h5>\n                {meal.curries && meal.curries.length > 0 && (\n                  <div className=\"mt-1\">\n                    <p className=\"text-sm font-medium\">Curries:</p>\n                    <ul className=\"list-disc list-inside text-sm text-gray-600\">\n                      {meal.curries.map((curry, i) => <li key={i}>{curry}</li>)}\n                    </ul>\n                  </div>\n                )}\n                {meal.extras && meal.extras.length > 0 && (\n                  <div className=\"mt-1\">\n                    <p className=\"text-sm font-medium\">Extras:</p>\n                    <ul className=\"list-disc list-inside text-sm text-gray-600\">\n                      {meal.extras.map((extra, i) => <li key={i}>{extra.item} x{extra.quantity}</li>)}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"p-3 border rounded-lg bg-gray-50/50\">\n              <h5 className=\"font-semibold\">{order.mealType}</h5>\n              {order.curries && order.curries.length > 0 && (\n                <div className=\"mt-1\">\n                  <p className=\"text-sm font-medium\">Curries:</p>\n                  <ul className=\"list-disc list-inside text-sm text-gray-600\">\n                    {order.curries.map((curry, i) => <li key={i}>{curry}</li>)}\n                  </ul>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-between items-center font-bold text-lg border-t pt-4 mt-4\">\n          <span>Total:</span>\n          <span className=\"text-orange-600\">${order.total.toFixed(2)}</span>\n        </div>\n      </div>\n      <DialogFooter>\n        {order.status === 'pending' && (\n          <Button\n            onClick={() => onUpdateStatus(order.id, 'completed')}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white w-full\"\n          >\n            Mark as Prepared\n          </Button>\n        )}\n      </DialogFooter>\n    </DialogContent>\n  );\n};\n\nexport default OrderDetailModal;","size_bytes":3776},"src/components/merchant/OrderList.jsx":{"content":"import React, { useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogTrigger } from '@/components/ui/dialog';\nimport OrderDetailModal from './OrderDetailModal';\n\nconst OrderList = ({ orders, onUpdateStatus, category }) => {\n  const [selectedOrder, setSelectedOrder] = useState(null);\n\n  const getOrderStatusColor = (status) => {\n    const statusMap = {\n      pending: 'secondary',\n      completed: 'success',\n      canceled: 'destructive'\n    };\n    return statusMap[status] || 'secondary';\n  };\n\n  if (orders.length === 0) {\n    return <p className=\"text-gray-500 text-center py-8\">No orders in this category</p>;\n  }\n\n  return (\n    <>\n      <Dialog>\n        {orders.map(order => (\n          <DialogTrigger key={order.id} asChild>\n            <div className=\"border rounded-lg p-4 bg-white/50 cursor-pointer hover:bg-orange-50/50 transition-colors\" onClick={() => setSelectedOrder(order)}>\n              <div className=\"flex justify-between items-start mb-2\">\n                <h4 className=\"font-semibold\">Order #{order.orderNumber}</h4>\n                <Badge variant={getOrderStatusColor(order.status)}>\n                  {order.status === 'completed' && category === 'active' ? 'Completed' : order.status}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                <strong>Customer:</strong> {order.customerName}\n              </p>\n              <div className=\"flex justify-between items-end\">\n                <p className=\"text-sm text-gray-600 mb-0\">\n                  <strong>Total:</strong> ${order.total.toFixed(2)}\n                </p>\n                {order.status === 'pending' && (\n                  <Button\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onUpdateStatus(order.id, 'completed');\n                    }}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n                  >\n                    Mark as Prepared\n                  </Button>\n                )}\n              </div>\n            </div>\n          </DialogTrigger>\n        ))}\n        {selectedOrder && (\n          <OrderDetailModal order={selectedOrder} onUpdateStatus={onUpdateStatus} />\n        )}\n      </Dialog>\n    </>\n  );\n};\n\nexport default OrderList;","size_bytes":2407},"src/components/merchant/OrdersTab.jsx":{"content":"import React from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Clock, ShoppingBag } from 'lucide-react';\nimport OrderList from './OrderList';\n\nconst OrdersTab = ({ pendingOrders, activeOrders, onUpdateStatus }) => {\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-6\">\n      <Card className=\"store-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"w-5 h-5 mr-2 text-orange-500\" />\n            Pending Orders ({pendingOrders.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 max-h-96 overflow-y-auto\">\n          <OrderList orders={pendingOrders} onUpdateStatus={onUpdateStatus} category=\"pending\" />\n        </CardContent>\n      </Card>\n\n      <Card className=\"store-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <ShoppingBag className=\"w-5 h-5 mr-2 text-blue-500\" />\n            Active Orders ({activeOrders.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 max-h-96 overflow-y-auto\">\n          <OrderList orders={activeOrders} onUpdateStatus={onUpdateStatus} category=\"active\" />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default OrdersTab;","size_bytes":1321},"src/components/merchant/SettingsTab.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Settings } from 'lucide-react';\nimport { MultiSelect } from '@/components/ui/multi-select';\n\nconst SettingsTab = ({ settings, setStoreSettings, onSave }) => {\n  const [universities, setUniversities] = useState([]);\n\n  useEffect(() => {\n    const storedUniversities = JSON.parse(localStorage.getItem('quickmeal_universities') || '[]');\n    setUniversities(storedUniversities.map(uni => ({ value: uni.name, label: uni.name })));\n  }, []);\n\n  const handleSettingChange = (field, value) => {\n    setStoreSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleUniversityChange = (selected) => {\n    setStoreSettings(prev => ({ ...prev, universities: selected }));\n  };\n\n  return (\n    <Card className=\"store-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          Store Settings\n        </CardTitle>\n        <CardDescription>\n          Manage your store availability, order limits, and university affiliations.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 border rounded-lg bg-white/50\">\n              <div>\n                <h4 className=\"font-semibold\">Store Open</h4>\n                <p className=\"text-sm text-gray-600\">Accept new customers</p>\n              </div>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.isOpen}\n                  onChange={(e) => handleSettingChange('isOpen', e.target.checked)}\n                  className=\"mr-2\"\n                />\n              </label>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 border rounded-lg bg-white/50\">\n              <div>\n                <h4 className=\"font-semibold\">Accepting Orders</h4>\n                <p className=\"text-sm text-gray-600\">Allow online pre-orders</p>\n              </div>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.acceptingOrders}\n                  onChange={(e) => handleSettingChange('acceptingOrders', e.target.checked)}\n                  className=\"mr-2\"\n                />\n              </label>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"orderLimit\">Daily Order Limit</Label>\n              <Input\n                id=\"orderLimit\"\n                type=\"number\"\n                placeholder=\"Leave empty for no limit\"\n                value={settings.orderLimit || ''}\n                onChange={(e) => handleSettingChange('orderLimit', e.target.value ? parseInt(e.target.value) : null)}\n              />\n              <p className=\"text-sm text-gray-600\">\n                Limit the number of online orders per day\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"closingTime\">Closing Time</Label>\n              <Input\n                id=\"closingTime\"\n                type=\"time\"\n                value={settings.closingTime || ''}\n                onChange={(e) => handleSettingChange('closingTime', e.target.value)}\n              />\n              <p className=\"text-sm text-gray-600\">\n                Display closing time to customers\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"universities\">Associated Universities</Label>\n          <MultiSelect\n            options={universities}\n            selected={settings.universities || []}\n            onChange={handleUniversityChange}\n            className=\"w-full\"\n            placeholder=\"Select universities...\"\n          />\n          <p className=\"text-sm text-gray-600\">\n            Select universities your store is affiliated with.\n          </p>\n        </div>\n\n        <Button onClick={onSave} className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white\">\n          Save Settings\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SettingsTab;","size_bytes":4628},"src/components/merchant/StatsCards.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Clock, ShoppingBag, CheckCircle, CalendarCheck } from 'lucide-react';\n\nconst StatCard = ({ title, value, icon: Icon, colorClass, iconColorClass }) => (\n  <Card className=\"store-card\">\n    <CardContent className=\"p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-600\">{title}</p>\n          <p className={`text-3xl font-bold ${colorClass}`}>{value}</p>\n        </div>\n        <Icon className={`w-8 h-8 ${iconColorClass}`} />\n      </div>\n    </CardContent>\n  </Card>\n);\n\nconst StatsCards = ({ pendingCount, activeCount, completedTodayCount, completedMonthCount }) => {\n  const stats = [\n    { title: 'Pending Orders', value: pendingCount, icon: Clock, color: 'text-orange-600', iconColor: 'text-orange-500' },\n    { title: 'Ready for Pickup', value: activeCount, icon: ShoppingBag, color: 'text-blue-600', iconColor: 'text-blue-500' },\n    { title: 'Completed Today', value: completedTodayCount, icon: CheckCircle, color: 'text-green-600', iconColor: 'text-green-500' },\n    { title: 'Completed This Month', value: completedMonthCount, icon: CalendarCheck, color: 'text-purple-600', iconColor: 'text-purple-500' },\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay: 0.1 }}\n      className=\"grid md:grid-cols-4 gap-6 mb-8\"\n    >\n      {stats.map((stat, index) => (\n        <StatCard \n          key={index}\n          title={stat.title}\n          value={stat.value}\n          icon={stat.icon}\n          colorClass={stat.color}\n          iconColorClass={stat.iconColor}\n        />\n      ))}\n    </motion.div>\n  );\n};\n\nexport default StatsCards;","size_bytes":1841},"src/components/order/CurrySelection.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { PlusCircle, X } from 'lucide-react';\n\nconst CurrySelection = ({ curryOptions, meal, updateMeal, extraCurryPrice }) => {\n  const handleCurryChange = (curryIndex, value) => {\n    const newCurries = [...meal.curries];\n    newCurries[curryIndex] = value;\n    updateMeal({ curries: newCurries });\n  };\n\n  const addCurrySlot = () => {\n    updateMeal({ curries: [...meal.curries, ''] });\n  };\n\n  const removeCurrySlot = (index) => {\n    updateMeal({ curries: meal.curries.filter((_, i) => i !== index) });\n  };\n\n  const canAddMoreCurries = meal.curries.length < curryOptions.length;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay: 0.2 }}\n    >\n      <Card className=\"meal-card\">\n        <CardHeader>\n          <CardTitle>2. Select Curries</CardTitle>\n          <CardDescription>Your meal includes 3 curries. Add more for ${extraCurryPrice.toFixed(2)} each.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {meal.curries.map((selectedCurry, index) => (\n            <div key={index} className=\"flex items-center gap-2\">\n              <div className=\"flex-grow\">\n                <label className=\"text-sm font-medium\">Curry {index + 1}</label>\n                <Select onValueChange={(value) => handleCurryChange(index, value)} value={selectedCurry}>\n                  <SelectTrigger>\n                    <SelectValue placeholder={`Select curry ${index + 1}`} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {curryOptions.map(curry => (\n                      <SelectItem key={curry.id} value={curry.name}>\n                        {curry.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              {index >= 3 && (\n                <Button variant=\"ghost\" size=\"icon\" className=\"mt-6\" onClick={() => removeCurrySlot(index)}>\n                  <X className=\"h-4 w-4 text-red-500\"/>\n                </Button>\n              )}\n            </div>\n          ))}\n          {canAddMoreCurries && (\n            <Button variant=\"outline\" onClick={addCurrySlot}>\n              <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Another Curry\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport default CurrySelection;","size_bytes":2756},"src/components/order/ExtrasSelection.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Minus } from 'lucide-react';\n\nconst ExtrasSelection = ({ extraOptions, meal, updateMeal }) => {\n  const handleExtraChange = (extraType, change) => {\n    const currentQuantity = meal.extras[extraType] || 0;\n    const newQuantity = Math.max(0, currentQuantity + change);\n    updateMeal({ extras: { ...meal.extras, [extraType]: newQuantity } });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay: 0.3 }}\n    >\n      <Card className=\"meal-card\">\n        <CardHeader>\n          <CardTitle>3. Add Extras (Optional)</CardTitle>\n          <CardDescription>Customize your meal with additional items</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {extraOptions.map(extra => (\n            <div key={extra.value} className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div>\n                <h4 className=\"font-semibold\">{extra.label}</h4>\n                <p className=\"text-sm text-gray-600\">${extra.price.toFixed(2)} each</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleExtraChange(extra.value, -1)}\n                  disabled={!meal.extras[extra.value]}\n                >\n                  <Minus className=\"w-4 h-4\" />\n                </Button>\n                <span className=\"w-8 text-center font-semibold\">\n                  {meal.extras[extra.value] || 0}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleExtraChange(extra.value, 1)}\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport default ExtrasSelection;","size_bytes":2238},"src/components/order/MealTypeSelection.jsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MealTypeSelection = ({ meal, updateMeal, mealTypes }) => {\n  const handleMealTypeChange = (value) => {\n    updateMeal({ mealType: value, curries: ['', '', ''] });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay: 0.1 }}\n    >\n      <Card className=\"meal-card\">\n        <CardHeader>\n          <CardTitle>1. Choose Your Meal Type</CardTitle>\n          <CardDescription>Select your preferred meal base</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {mealTypes.map(mealTypeOption => (\n              <div\n                key={mealTypeOption.value}\n                className={`border rounded-lg p-4 cursor-pointer transition-all ${\n                  meal.mealType === mealTypeOption.value \n                    ? 'border-orange-500 bg-orange-50' \n                    : 'border-gray-200 hover:border-orange-300'\n                }`}\n                onClick={() => handleMealTypeChange(mealTypeOption.value)}\n              >\n                <div className=\"flex justify-between items-center\">\n                  <h4 className=\"font-semibold\">{mealTypeOption.label}</h4>\n                  <span className=\"text-lg font-bold text-orange-600\">${mealTypeOption.basePrice}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport default MealTypeSelection;","size_bytes":1691},"src/components/order/OrderSummary.jsx":{"content":"import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart } from \"lucide-react\";\n\nconst OrderSummary = ({\n  meals,\n  orderTotal,\n  mealTypes,\n  extraOptions,\n  loading,\n  onSubmit,\n  isOrderValid,\n  storeSettings, // ✅ Pass in merchant's store settings\n}) => {\n  const hasMeals = meals.some((meal) => meal.mealType);\n\n  // ✅ Read free count + extra price from store settings\n  const freeVegCount = storeSettings?.defaultVegCount || 0;\n  const extraVegPrice = storeSettings?.extraVegPrice || 0;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay: 0.4 }}\n      className=\"sticky top-4\"\n    >\n      <Card className=\"order-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <ShoppingCart className=\"w-5 h-5 mr-2\" />\n            Order Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {!hasMeals && (\n            <p className=\"text-gray-500 text-center\">\n              Your cart is empty. Select a meal to get started.\n            </p>\n          )}\n\n          {hasMeals && (\n            <div className=\"space-y-4\">\n              {meals.map((meal, index) => {\n                if (!meal.mealType) return null;\n                const selectedMeal = mealTypes.find(\n                  (m) => m.value === meal.mealType\n                );\n                const filledCurries = meal.curries.filter((c) => c);\n                const extraCurriesCount = Math.max(\n                  0,\n                  filledCurries.length - freeVegCount\n                );\n\n                return (\n                  <div key={meal.id} className=\"border-b pb-3 mb-3\">\n                    <h4 className=\"font-bold text-md mb-2\">\n                      Meal #{index + 1}: {selectedMeal.label}\n                    </h4>\n\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Base Price</span>\n                      <span>${selectedMeal.basePrice.toFixed(2)}</span>\n                    </div>\n\n                    {extraCurriesCount > 0 && (\n                      <div className=\"flex justify-between text-sm mt-1\">\n                        <span>\n                          Extra Veg Curries ({extraCurriesCount} × $\n                          {extraVegPrice})\n                        </span>\n                        <span>\n                          ${(extraCurriesCount * extraVegPrice).toFixed(2)}\n                        </span>\n                      </div>\n                    )}\n\n                    {Object.entries(meal.extras).map(([extraType, quantity]) => {\n                      if (quantity === 0) return null;\n                      const extra = extraOptions.find(\n                        (e) => e.value === extraType\n                      );\n                      return (\n                        <div\n                          key={extraType}\n                          className=\"flex justify-between text-sm\"\n                        >\n                          <span>\n                            {extra?.label} x{quantity}\n                          </span>\n                          <span>\n                            ${(extra?.price * quantity).toFixed(2)}\n                          </span>\n                        </div>\n                      );\n                    })}\n\n                    <div className=\"flex justify-between font-semibold text-sm mt-1\">\n                      <span>Subtotal</span>\n                      <span>${meal.total.toFixed(2)}</span>\n                    </div>\n                  </div>\n                );\n              })}\n\n              <div className=\"border-t pt-3 flex justify-between font-bold text-lg\">\n                <span>Total:</span>\n                <span className=\"text-orange-600\">\n                  ${orderTotal.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          )}\n\n          <Button\n            onClick={onSubmit}\n            disabled={!isOrderValid || loading}\n            className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white py-3\"\n          >\n            {loading ? \"Placing Order...\" : \"Place Order\"}\n          </Button>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport default OrderSummary;\n","size_bytes":4537},"src/components/ui/alert-dialog.jsx":{"content":"import React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nconst AlertDialog = AlertDialogPrimitive.Root;\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = ({ className, ...props }) => (\n  <AlertDialogPrimitive.Portal className={cn(className)} {...props} />\n);\nAlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName;\n\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }) => (\n  <div\n    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({ className, ...props }) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};","size_bytes":3658},"src/components/ui/badge.jsx":{"content":"import { cn } from '@/lib/utils';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        outline: 'text-foreground',\n        success:\n          'border-transparent bg-green-500 text-white hover:bg-green-500/80',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };","size_bytes":1072},"src/components/ui/button.jsx":{"content":"import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst buttonVariants = cva(\n\t'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: 'bg-primary text-primary-foreground hover:bg-primary/90',\n\t\t\t\tdestructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n\t\t\t\toutline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n\t\t\t\tsecondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n\t\t\t\tghost: 'hover:bg-accent hover:text-accent-foreground',\n\t\t\t\tlink: 'text-primary underline-offset-4 hover:underline',\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: 'h-10 px-4 py-2',\n\t\t\t\tsm: 'h-9 rounded-md px-3',\n\t\t\t\tlg: 'h-11 rounded-md px-8',\n\t\t\t\ticon: 'h-10 w-10',\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: 'default',\n\t\t\tsize: 'default',\n\t\t},\n\t},\n);\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n\tconst Comp = asChild ? Slot : 'button';\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\n\t\t\tref={ref}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","size_bytes":1512},"src/components/ui/card.jsx":{"content":"import { cn } from '@/lib/utils';\nimport React from 'react';\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'rounded-xl border bg-card text-card-foreground shadow-sm',\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      'text-2xl font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };","size_bytes":1503},"src/components/ui/command.jsx":{"content":"import React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}","size_bytes":3859},"src/components/ui/dialog.jsx":{"content":"import React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3269},"src/components/ui/input.jsx":{"content":"import { cn } from '@/lib/utils';\nimport React from 'react';\n\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nInput.displayName = 'Input';\n\nexport { Input };","size_bytes":679},"src/components/ui/label.jsx":{"content":"import { cn } from '@/lib/utils';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\n);\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };","size_bytes":539},"src/components/ui/multi-select.jsx":{"content":"import React from 'react';\nimport { X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n} from '@/components/ui/command';\nimport { Command as CommandPrimitive } from 'cmdk';\n\nexport function MultiSelect({\n  options,\n  selected,\n  onChange,\n  className,\n  placeholder = 'Select options...',\n  ...props\n}) {\n  const [open, setOpen] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState('');\n  const inputRef = React.useRef(null);\n\n  const handleSelect = (option) => {\n    onChange([...selected, option.value]);\n  };\n\n  const handleUnselect = (value) => {\n    onChange(selected.filter((s) => s !== value));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && inputValue) {\n      const option = options.find(opt => opt.label.toLowerCase() === inputValue.toLowerCase());\n      if (option && !selected.includes(option.value)) {\n        handleSelect(option);\n      }\n      setInputValue('');\n      e.preventDefault();\n    }\n    if (e.key === 'Backspace' && !inputValue && selected.length > 0) {\n      handleUnselect(selected[selected.length - 1]);\n    }\n  };\n\n  const filteredOptions = options.filter(\n    (option) =>\n      !selected.includes(option.value) &&\n      option.label.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  return (\n    <CommandPrimitive onKeyDown={handleKeyDown} className=\"overflow-visible bg-transparent\">\n      <div className=\"group border border-input rounded-md px-3 py-2 text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\">\n        <div className=\"flex gap-1 flex-wrap\">\n          {selected.map((value) => {\n            const option = options.find(opt => opt.value === value);\n            return (\n              <Badge key={value} variant=\"secondary\">\n                {option?.label}\n                <button\n                  className=\"ml-1 ring-offset-background rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleUnselect(value);\n                    }\n                  }}\n                  onMouseDown={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                  }}\n                  onClick={() => handleUnselect(value)}\n                >\n                  <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                </button>\n              </Badge>\n            );\n          })}\n          <CommandPrimitive.Input\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => setOpen(true)}\n            placeholder={placeholder}\n            className=\"ml-2 bg-transparent outline-none placeholder:text-muted-foreground flex-1\"\n          />\n        </div>\n      </div>\n      <div className=\"relative mt-2\">\n        {open && filteredOptions.length > 0 ? (\n          <div className=\"absolute w-full z-10 top-0 rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\n            <CommandGroup className=\"h-full overflow-auto\">\n              {filteredOptions.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  onMouseDown={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                  }}\n                  onSelect={() => {\n                    setInputValue('');\n                    handleSelect(option);\n                  }}\n                  className=\"cursor-pointer\"\n                >\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </div>\n        ) : null}\n      </div>\n    </CommandPrimitive>\n  );\n}","size_bytes":3913},"src/components/ui/popover.jsx":{"content":"import React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1102},"src/components/ui/select.jsx":{"content":"import { cn } from '@/lib/utils';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport React from 'react';\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};","size_bytes":4762},"src/components/ui/tabs.jsx":{"content":"import { cn } from '@/lib/utils';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport React from 'react';\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };","size_bytes":1545},"src/components/ui/toast.jsx":{"content":"import { cn } from '@/lib/utils';\nimport * as ToastPrimitives from '@radix-ui/react-toast';\nimport { cva } from 'class-variance-authority';\nimport { X } from 'lucide-react';\nimport React from 'react';\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n\t<ToastPrimitives.Viewport\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n\t\t\tclassName,\n\t\t)}\n\t\t{...props}\n\t/>\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n\t'data-[swipe=move]:transition-none group relative pointer-events-auto flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full data-[state=closed]:slide-out-to-right-full',\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: 'bg-background border',\n\t\t\t\tdestructive:\n          'group destructive border-destructive bg-destructive text-destructive-foreground',\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: 'default',\n\t\t},\n\t},\n);\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n\treturn (\n\t\t<ToastPrimitives.Root\n\t\t\tref={ref}\n\t\t\tclassName={cn(toastVariants({ variant }), className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n\t<ToastPrimitives.Action\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-destructive/30 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n\t\t\tclassName,\n\t\t)}\n\t\t{...props}\n\t/>\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n\t<ToastPrimitives.Close\n\t\tref={ref}\n\t\tclassName={cn(\n\t\t\t'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n\t\t\tclassName,\n\t\t)}\n\t\ttoast-close=\"\"\n\t\t{...props}\n\t>\n\t\t<X className=\"h-4 w-4\" />\n\t</ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n\t<ToastPrimitives.Title\n\t\tref={ref}\n\t\tclassName={cn('text-sm font-semibold', className)}\n\t\t{...props}\n\t/>\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n\t<ToastPrimitives.Description\n\t\tref={ref}\n\t\tclassName={cn('text-sm opacity-90', className)}\n\t\t{...props}\n\t/>\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\nexport {\n\tToast,\n\tToastAction,\n\tToastClose,\n\tToastDescription,\n\tToastProvider,\n\tToastTitle,\n\tToastViewport,\n};","size_bytes":3784},"src/components/ui/toaster.jsx":{"content":"import {\n\tToast,\n\tToastClose,\n\tToastDescription,\n\tToastProvider,\n\tToastTitle,\n\tToastViewport,\n} from '@/components/ui/toast';\nimport { useToast } from '@/components/ui/use-toast';\nimport React from 'react';\n\nexport function Toaster() {\n\tconst { toasts } = useToast();\n\n\treturn (\n\t\t<ToastProvider>\n\t\t\t{toasts.map(({ id, title, description, action, ...props }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Toast key={id} {...props}>\n\t\t\t\t\t\t<div className=\"grid gap-1\">\n\t\t\t\t\t\t\t{title && <ToastTitle>{title}</ToastTitle>}\n\t\t\t\t\t\t\t{description && (\n\t\t\t\t\t\t\t\t<ToastDescription>{description}</ToastDescription>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{action}\n\t\t\t\t\t\t<ToastClose />\n\t\t\t\t\t</Toast>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<ToastViewport />\n\t\t</ToastProvider>\n\t);\n}","size_bytes":712},"src/components/ui/use-toast.js":{"content":"import { useState, useEffect } from \"react\"\n\nconst TOAST_LIMIT = 1\n\nlet count = 0\nfunction generateId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\nconst toastStore = {\n  state: {\n    toasts: [],\n  },\n  listeners: [],\n  \n  getState: () => toastStore.state,\n  \n  setState: (nextState) => {\n    if (typeof nextState === 'function') {\n      toastStore.state = nextState(toastStore.state)\n    } else {\n      toastStore.state = { ...toastStore.state, ...nextState }\n    }\n    \n    toastStore.listeners.forEach(listener => listener(toastStore.state))\n  },\n  \n  subscribe: (listener) => {\n    toastStore.listeners.push(listener)\n    return () => {\n      toastStore.listeners = toastStore.listeners.filter(l => l !== listener)\n    }\n  }\n}\n\nexport const toast = ({ ...props }) => {\n  const id = generateId()\n\n  const update = (props) =>\n    toastStore.setState((state) => ({\n      ...state,\n      toasts: state.toasts.map((t) =>\n        t.id === id ? { ...t, ...props } : t\n      ),\n    }))\n\n  const dismiss = () => toastStore.setState((state) => ({\n    ...state,\n    toasts: state.toasts.filter((t) => t.id !== id),\n  }))\n\n  toastStore.setState((state) => ({\n    ...state,\n    toasts: [\n      { ...props, id, dismiss },\n      ...state.toasts,\n    ].slice(0, TOAST_LIMIT),\n  }))\n\n  return {\n    id,\n    dismiss,\n    update,\n  }\n}\n\nexport function useToast() {\n  const [state, setState] = useState(toastStore.getState())\n  \n  useEffect(() => {\n    const unsubscribe = toastStore.subscribe((state) => {\n      setState(state)\n    })\n    \n    return unsubscribe\n  }, [])\n  \n  useEffect(() => {\n    const timeouts = []\n\n    state.toasts.forEach((toast) => {\n      if (toast.duration === Infinity) {\n        return\n      }\n\n      const timeout = setTimeout(() => {\n        toast.dismiss()\n      }, toast.duration || 5000)\n\n      timeouts.push(timeout)\n    })\n\n    return () => {\n      timeouts.forEach((timeout) => clearTimeout(timeout))\n    }\n  }, [state.toasts])\n\n  return {\n    toast,\n    toasts: state.toasts,\n  }\n}","size_bytes":2032},"src/pages/Merchant/MenuPricing.jsx":{"content":"// src/pages/Merchant/MenuPricing.jsx\nimport React, { useState } from \"react\";\nimport { useMerchantConfig } from \"@/store/merchantConfig\";\nimport { nanoid } from \"nanoid\";\n\nconst MenuPricing = () => {\n  const { config, setConfig } = useMerchantConfig();\n  const [newMain, setNewMain] = useState(\"\");\n  const [newCurry, setNewCurry] = useState(\"\");\n  const [curryType, setCurryType] = useState(\"veg\");\n  const [curryDivisible, setCurryDivisible] = useState(false);\n  const [newGravy, setNewGravy] = useState(\"\");\n\n  if (!config) {\n    return (\n      <div className=\"p-6\">\n        <h1 className=\"text-2xl font-bold\">Menu & Pricing</h1>\n        <p className=\"text-gray-500\">Loading configuration...</p>\n      </div>\n    );\n  }\n\n  // Helper to read portion list\n  const portions = config.portions || config.portionCategories || [];\n\n  // --- Meal Time Selection ---\n  const updateMealTime = (value) => {\n    setConfig({ ...config, activeMealTime: value });\n  };\n\n  // --- Main Meals ---\n  const mainListKey = \"mainMeals\";\n  const getMainMeals = () => config[mainListKey] || config.mains || [];\n\n  const addMain = () => {\n    if (!newMain.trim()) return;\n    const newItem = {\n      id: nanoid(),\n      name: newMain.trim(),\n      available: true,\n      prices: portions.reduce((acc, portion) => {\n        acc[portion.id] = 0;\n        return acc;\n      }, {}),\n    };\n    setConfig({\n      ...config,\n      [mainListKey]: [...getMainMeals(), newItem],\n    });\n    setNewMain(\"\");\n  };\n\n  const updateMainPrice = (id, portionId, value) => {\n    const updated = getMainMeals().map((m) =>\n      m.id === id ? { ...m, prices: { ...m.prices, [portionId]: Number(value) } } : m\n    );\n    setConfig({ ...config, [mainListKey]: updated });\n  };\n\n  const updateMainField = (id, field, value) => {\n    const updated = getMainMeals().map((m) =>\n      m.id === id ? { ...m, [field]: value } : m\n    );\n    setConfig({ ...config, [mainListKey]: updated });\n  };\n\n  const removeMain = (id) => {\n    const updated = getMainMeals().filter((m) => m.id !== id);\n    setConfig({ ...config, [mainListKey]: updated });\n  };\n\n  // --- Curries ---\n  const curriesList = config.curries || [];\n\n  const addCurry = () => {\n    if (!newCurry.trim()) return;\n\n    let newItem = {\n      id: nanoid(),\n      name: newCurry.trim(),\n      type: curryType,\n      divisible: curryType === \"nonveg\" ? Boolean(curryDivisible) : false,\n      available: true,\n    };\n\n    if (curryType === \"nonveg\") {\n      // Non-veg curries need portion prices\n      newItem.prices = portions.reduce((acc, portion) => {\n        acc[portion.id] = 0;\n        return acc;\n      }, {});\n\n      if (curryDivisible) {\n        newItem.extraPiecePrice = 0; // single number\n      }\n    }\n\n    setConfig({ ...config, curries: [...curriesList, newItem] });\n    setNewCurry(\"\");\n    setCurryType(\"veg\");\n    setCurryDivisible(false);\n  };\n\n  const updateCurryField = (id, field, value) => {\n    const updated = curriesList.map((c) => (c.id === id ? { ...c, [field]: value } : c));\n    setConfig({ ...config, curries: updated });\n  };\n\n  const updateCurryPrice = (id, portionId, value) => {\n    const updated = curriesList.map((c) =>\n      c.id === id ? { ...c, prices: { ...c.prices, [portionId]: Number(value) } } : c\n    );\n    setConfig({ ...config, curries: updated });\n  };\n\n  const updateExtraPiecePrice = (id, value) => {\n    const updated = curriesList.map((c) =>\n      c.id === id ? { ...c, extraPiecePrice: Number(value) } : c\n    );\n    setConfig({ ...config, curries: updated });\n  };\n\n  const removeCurry = (id) => {\n    const updated = curriesList.filter((c) => c.id !== id);\n    setConfig({ ...config, curries: updated });\n  };\n\n  // --- Gravies ---\n  const addGravy = () => {\n    if (!newGravy.trim()) return;\n    const newItem = {\n      id: nanoid(),\n      name: newGravy.trim(),\n      available: true,\n    };\n    setConfig({ ...config, gravies: [...(config.gravies || []), newItem] });\n    setNewGravy(\"\");\n  };\n\n  const updateGravyField = (id, field, value) => {\n    const updated = (config.gravies || []).map((g) =>\n      g.id === id ? { ...g, [field]: value } : g\n    );\n    setConfig({ ...config, gravies: updated });\n  };\n\n  const removeGravy = (id) => {\n    const updated = (config.gravies || []).filter((g) => g.id !== id);\n    setConfig({ ...config, gravies: updated });\n  };\n\n  // --- UI ---\n  return (\n    <div className=\"p-6 space-y-8\">\n      <h1 className=\"text-2xl font-bold\">Menu & Pricing</h1>\n\n      {/* Meal Time Selection */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">Select Meal Time</label>\n        <select\n          value={config.activeMealTime || (config.mealTimes?.[0] ?? \"\")}\n          onChange={(e) => updateMealTime(e.target.value)}\n          className=\"border rounded p-2 w-full\"\n        >\n          {(config.mealTimes || []).map((meal) => (\n            <option key={meal} value={meal}>\n              {meal}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Show active meal time */}\n      <div className=\"mt-4\">\n        <p className=\"text-lg\">\n          Currently editing menu for:{\" \"}\n          <span className=\"font-semibold text-orange-600\">\n            {config.activeMealTime || \"—\"}\n          </span>\n        </p>\n      </div>\n\n      {/* Main Meals */}\n      <div className=\"border rounded p-4 space-y-3\">\n        <h2 className=\"text-xl font-semibold\">Add New Main Item</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Meal name (e.g., Rice)\"\n          value={newMain}\n          onChange={(e) => setNewMain(e.target.value)}\n          className=\"border rounded p-2 w-full\"\n        />\n        <button\n          onClick={addMain}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded mt-2\"\n        >\n          Add Item\n        </button>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Main Items & Portion Prices</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {getMainMeals().map((item) => (\n            <div key={item.id} className=\"border rounded p-4 flex flex-col space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-bold\">{item.name}</h3>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={item.available}\n                    onChange={(e) =>\n                      updateMainField(item.id, \"available\", e.target.checked)\n                    }\n                  />\n                  <span>Available</span>\n                </label>\n              </div>\n\n              <div className=\"space-y-2\">\n                {portions.map((portion) => (\n                  <div key={portion.id}>\n                    <label className=\"block text-sm\">{portion.name} Price:</label>\n                    <input\n                      type=\"number\"\n                      value={item.prices?.[portion.id] ?? \"\"}\n                      onChange={(e) =>\n                        updateMainPrice(item.id, portion.id, e.target.value)\n                      }\n                      className=\"border rounded p-2 w-full\"\n                    />\n                  </div>\n                ))}\n              </div>\n\n              <button\n                onClick={() => removeMain(item.id)}\n                className=\"text-red-600 text-sm self-end\"\n              >\n                Delete\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Curries Section */}\n      <div className=\"border rounded p-4 space-y-3\">\n        <h2 className=\"text-xl font-semibold\">Add New Curry</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Curry name (e.g., Chicken)\"\n          value={newCurry}\n          onChange={(e) => setNewCurry(e.target.value)}\n          className=\"border rounded p-2 w-full\"\n        />\n        <select\n          value={curryType}\n          onChange={(e) => setCurryType(e.target.value)}\n          className=\"border rounded p-2 w-full mt-2\"\n        >\n          <option value=\"veg\">Veg</option>\n          <option value=\"nonveg\">Non-Veg</option>\n        </select>\n\n        {curryType === \"nonveg\" && (\n          <label className=\"flex items-center space-x-2 mt-2\">\n            <input\n              type=\"checkbox\"\n              checked={curryDivisible}\n              onChange={(e) => setCurryDivisible(e.target.checked)}\n            />\n            <span>Divisible</span>\n          </label>\n        )}\n\n        <button\n          onClick={addCurry}\n          className=\"bg-green-600 text-white px-4 py-2 rounded mt-2\"\n        >\n          Add Curry\n        </button>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Curries</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {curriesList.map((item) => (\n            <div key={item.id} className=\"border rounded p-4 flex flex-col space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-bold\">\n                  {item.name}{\" \"}\n                  <span className=\"text-sm text-gray-500\">\n                    ({item.type === \"veg\" ? \"Veg\" : \"Non-Veg\"}{\" \"}\n                    {item.type === \"nonveg\" &&\n                      (item.divisible ? \"Divisible\" : \"Non-Divisible\")}\n                    )\n                  </span>\n                </h3>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={item.available}\n                    onChange={(e) =>\n                      updateCurryField(item.id, \"available\", e.target.checked)\n                    }\n                  />\n                  <span>Available</span>\n                </label>\n              </div>\n\n              {/* Show nothing for Veg curries (they use store settings price) */}\n              {item.type === \"nonveg\" && (\n                <div className=\"space-y-2\">\n                  {portions.map((portion) => (\n                    <div key={portion.id}>\n                      <label className=\"block text-sm\">\n                        {portion.name} Base Price:\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={item.prices?.[portion.id] ?? \"\"}\n                        onChange={(e) =>\n                          updateCurryPrice(item.id, portion.id, e.target.value)\n                        }\n                        className=\"border rounded p-2 w-full\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Extra piece price ONLY if non-veg + divisible */}\n              {item.type === \"nonveg\" && item.divisible && (\n                <div>\n                  <label className=\"block text-sm\">Extra Piece Price:</label>\n                  <input\n                    type=\"number\"\n                    value={item.extraPiecePrice ?? \"\"}\n                    onChange={(e) =>\n                      updateExtraPiecePrice(item.id, e.target.value)\n                    }\n                    className=\"border rounded p-2 w-full\"\n                  />\n                </div>\n              )}\n\n              <button\n                onClick={() => removeCurry(item.id)}\n                className=\"text-red-600 text-sm self-end\"\n              >\n                Delete\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Gravies */}\n      <div className=\"border rounded p-4 space-y-3\">\n        <h2 className=\"text-xl font-semibold\">Add New Gravy</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Gravy name (e.g., Parippu)\"\n          value={newGravy}\n          onChange={(e) => setNewGravy(e.target.value)}\n          className=\"border rounded p-2 w-full\"\n        />\n        <button\n          onClick={addGravy}\n          className=\"bg-purple-600 text-white px-4 py-2 rounded mt-2\"\n        >\n          Add Gravy\n        </button>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Gravy Types</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {(config.gravies || []).map((item) => (\n            <div key={item.id} className=\"border rounded p-4 flex flex-col space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-bold\">{item.name}</h3>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={item.available}\n                    onChange={(e) =>\n                      updateGravyField(item.id, \"available\", e.target.checked)\n                    }\n                  />\n                  <span>Available</span>\n                </label>\n              </div>\n\n              <button\n                onClick={() => removeGravy(item.id)}\n                className=\"text-red-600 text-sm self-end\"\n              >\n                Delete\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuPricing;\n","size_bytes":13215},"src/pages/Merchant/StoreSettings.jsx":{"content":"// src/pages/Merchant/StoreSettings.jsx\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMerchantConfig } from \"@/store/merchantConfig\";\nimport { nanoid } from \"nanoid\";\n\n// 🔹 Example universities (these should come from admin / backend)\nconst availableUniversities = [\n  { id: \"uoc\", name: \"University of Colombo\" },\n  { id: \"uop\", name: \"University of Peradeniya\" },\n  { id: \"uom\", name: \"University of Moratuwa\" },\n  { id: \"usjp\", name: \"University of Sri Jayewardenepura\" },\n  { id: \"uor\", name: \"University of Ruhuna\" },\n];\n\nconst StoreSettings = ({ settings, setSettings, onSave }) => {\n  const { config, setConfig } = useMerchantConfig();\n  const [newPortion, setNewPortion] = useState(\"\");\n\n  // Add new portion\n  const addPortion = () => {\n    if (!newPortion.trim()) return;\n    const newItem = { id: nanoid(), name: newPortion, multiplier: 1 };\n    setConfig({ ...config, portions: [...(config.portions || []), newItem] });\n    setNewPortion(\"\");\n  };\n\n  // Update portion name\n  const updatePortion = (id, value) => {\n    setConfig({\n      ...config,\n      portions: config.portions.map((p) =>\n        p.id === id ? { ...p, name: value } : p\n      ),\n    });\n  };\n\n  // Remove portion\n  const removePortion = (id) => {\n    setConfig({\n      ...config,\n      portions: config.portions.filter((p) => p.id !== id),\n      mains: config.mains.map((m) => {\n        const newPrices = { ...m.prices };\n        delete newPrices[id];\n        return { ...m, prices: newPrices };\n      }),\n      curries: config.curries.map((c) => {\n        if (!c.prices) return c;\n        const newPrices = { ...c.prices };\n        delete newPrices[id];\n        return { ...c, prices: newPrices };\n      }),\n    });\n  };\n\n  // Update default veg curry count\n  const updateDefaultVegCount = (value) => {\n    setConfig({\n      ...config,\n      defaultVegCount: Number(value) || 0,\n    });\n  };\n\n  // Update extra veg curry price\n  const updateExtraVegPrice = (value) => {\n    setConfig({\n      ...config,\n      extraVegPrice: Number(value) || 0,\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Store Settings</h1>\n\n      {/* --- Store Toggles --- */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <label className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            checked={settings.isOpen}\n            onChange={(e) =>\n              setSettings({ ...settings, isOpen: e.target.checked })\n            }\n          />\n          <span>Store Open</span>\n        </label>\n\n        <label className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            checked={settings.acceptingOrders}\n            onChange={(e) =>\n              setSettings({ ...settings, acceptingOrders: e.target.checked })\n            }\n          />\n          <span>Accepting Orders</span>\n        </label>\n\n        <div>\n          <label className=\"block text-sm\">Daily Order Limit</label>\n          <input\n            type=\"number\"\n            value={settings.orderLimit || \"\"}\n            onChange={(e) =>\n              setSettings({ ...settings, orderLimit: Number(e.target.value) })\n            }\n            className=\"border rounded p-2 w-full\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm\">Closing Time</label>\n          <input\n            type=\"time\"\n            value={settings.closingTime}\n            onChange={(e) =>\n              setSettings({ ...settings, closingTime: e.target.value })\n            }\n            className=\"border rounded p-2 w-full\"\n          />\n        </div>\n      </div>\n\n      {/* --- Veg Curries Settings --- */}\n      <div className=\"mt-6\">\n        <h2 className=\"text-xl font-semibold mb-2\">Veg Curries Pricing</h2>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm\">Default Free Veg Curries</label>\n            <input\n              type=\"number\"\n              value={config.defaultVegCount || 0}\n              onChange={(e) => updateDefaultVegCount(e.target.value)}\n              className=\"border rounded p-2 w-full\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm\">Extra Veg Curry Price</label>\n            <input\n              type=\"number\"\n              value={config.extraVegPrice || 0}\n              onChange={(e) => updateExtraVegPrice(e.target.value)}\n              className=\"border rounded p-2 w-full\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* --- Universities --- */}\n      <div className=\"mt-6\">\n        <h2 className=\"text-xl font-semibold mb-2\">Universities</h2>\n\n        {availableUniversities.length === 0 ? (\n          <div className=\"text-sm text-gray-500\">\n            No universities found. Ask an admin to add some.\n          </div>\n        ) : (\n          <>\n            {/* Dropdown */}\n            <div className=\"flex space-x-2 mb-4\">\n              <select\n                value=\"\"\n                onChange={(e) => {\n                  const selected = e.target.value;\n                  if (selected && !config.universities.includes(selected)) {\n                    setConfig({\n                      ...config,\n                      universities: [...(config.universities || []), selected],\n                    });\n                  }\n                }}\n                className=\"border rounded p-2 flex-1\"\n              >\n                <option value=\"\">-- Select University --</option>\n                {availableUniversities.map((uni) => (\n                  <option key={uni.id} value={uni.id}>\n                    {uni.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Selected universities */}\n            <div className=\"space-y-2\">\n              {(config.universities || []).map((uniId) => {\n                const uni = availableUniversities.find((u) => u.id === uniId);\n                return (\n                  <div\n                    key={uniId}\n                    className=\"flex items-center justify-between border rounded p-2\"\n                  >\n                    <span>{uni ? uni.name : uniId}</span>\n                    <Button\n                      onClick={() =>\n                        setConfig({\n                          ...config,\n                          universities: config.universities.filter(\n                            (id) => id !== uniId\n                          ),\n                        })\n                      }\n                      className=\"bg-red-500 hover:bg-red-600 text-white px-3\"\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* --- Portion Categories --- */}\n      <div className=\"mt-6\">\n        <h2 className=\"text-xl font-semibold mb-2\">Portion Categories</h2>\n\n        <div className=\"space-y-2\">\n          {(config.portions || []).map((portion) => (\n            <div\n              key={portion.id}\n              className=\"flex items-center justify-between border rounded p-2\"\n            >\n              <input\n                type=\"text\"\n                value={portion.name}\n                onChange={(e) => updatePortion(portion.id, e.target.value)}\n                className=\"border rounded p-2 flex-1 mr-2\"\n              />\n              <Button\n                onClick={() => removePortion(portion.id)}\n                className=\"bg-red-500 hover:bg-red-600 text-white px-3\"\n              >\n                Remove\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex mt-4 space-x-2\">\n          <input\n            type=\"text\"\n            placeholder=\"New portion name\"\n            value={newPortion}\n            onChange={(e) => setNewPortion(e.target.value)}\n            className=\"border rounded p-2 flex-1\"\n          />\n          <Button\n            onClick={addPortion}\n            className=\"bg-green-500 hover:bg-green-600 text-white\"\n          >\n            Add\n          </Button>\n        </div>\n      </div>\n\n      <Button\n        onClick={onSave}\n        className=\"mt-6 bg-orange-500 hover:bg-orange-600\"\n      >\n        Save Settings\n      </Button>\n    </div>\n  );\n};\n\nexport default StoreSettings;\n","size_bytes":8430},"drizzle.config.ts":{"content":"import { defineConfig } from 'drizzle-kit';\n\nexport default defineConfig({\n  dialect: 'postgresql',\n  schema: './shared/schema.ts',\n  out: './drizzle',\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});","size_bytes":215},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":485},"server/index.ts":{"content":"import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport cookieParser from 'cookie-parser';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { storage } from './storage';\nimport { InsertUser, InsertSession } from '../shared/schema';\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// JWT secret - in production, this should be a secure random string\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key';\n\n// Middleware\napp.use(helmet());\napp.use(cors({\n  origin: true, // Allow all origins in development\n  credentials: true // Allow cookies\n}));\napp.use(express.json());\napp.use(cookieParser());\n\n// Authentication middleware\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const token = req.cookies.sessionToken;\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  try {\n    const sessionData = await storage.getSessionByToken(token);\n    \n    if (!sessionData) {\n      res.clearCookie('sessionToken');\n      return res.status(401).json({ error: 'Invalid or expired session' });\n    }\n\n    req.user = sessionData.user;\n    req.session = sessionData;\n    next();\n  } catch (error) {\n    res.clearCookie('sessionToken');\n    return res.status(403).json({ error: 'Invalid token' });\n  }\n};\n\n// Helper function to create session\nconst createSession = async (userId: number, rememberMe: boolean = false) => {\n  const expiresAt = new Date();\n  if (rememberMe) {\n    expiresAt.setDate(expiresAt.getDate() + 30); // 30 days\n  } else {\n    expiresAt.setHours(expiresAt.getHours() + 24); // 24 hours\n  }\n\n  const sessionData: InsertSession = {\n    userId,\n    expiresAt,\n    rememberMe\n  };\n\n  return await storage.createSession(sessionData);\n};\n\n// Routes\n\n// Register endpoint\napp.post('/api/auth/register', async (req, res) => {\n  try {\n    const { username, email, password, role = 'customer' } = req.body;\n\n    // Check if user already exists\n    const existingUserByEmail = await storage.getUserByEmail(email);\n    const existingUserByUsername = await storage.getUserByUsername(username);\n\n    if (existingUserByEmail) {\n      return res.status(400).json({ error: 'User with this email already exists' });\n    }\n\n    if (existingUserByUsername) {\n      return res.status(400).json({ error: 'Username already taken' });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create user\n    const userData: InsertUser = {\n      username,\n      email,\n      password: hashedPassword,\n      role,\n      approved: role === 'customer' ? true : false\n    };\n\n    const user = await storage.createUser(userData);\n\n    // Auto-login customers\n    if (role === 'customer') {\n      const session = await createSession(user.id);\n      \n      res.cookie('sessionToken', session.token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 24 * 60 * 60 * 1000 // 24 hours\n      });\n    }\n\n    // Don't send password in response\n    const { password: _, ...userResponse } = user;\n    res.status(201).json({ user: userResponse });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Login endpoint\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const { emailOrUsername, password, rememberMe = false } = req.body;\n\n    // Find user by email or username\n    let user = await storage.getUserByEmail(emailOrUsername);\n    if (!user) {\n      user = await storage.getUserByUsername(emailOrUsername);\n    }\n\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Check if merchant is approved\n    if (user.role === 'merchant' && !user.approved) {\n      return res.status(403).json({ error: 'Account pending approval' });\n    }\n\n    // Create session\n    const session = await createSession(user.id, rememberMe);\n\n    // Set cookie\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict' as const,\n      maxAge: rememberMe ? 30 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000 // 30 days or 24 hours\n    };\n\n    res.cookie('sessionToken', session.token, cookieOptions);\n\n    // Don't send password in response\n    const { password: _, ...userResponse } = user;\n    res.json({ user: userResponse });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Logout endpoint\napp.post('/api/auth/logout', authenticateToken, async (req: any, res) => {\n  try {\n    const token = req.cookies.sessionToken;\n    if (token) {\n      await storage.deleteSession(token);\n    }\n    res.clearCookie('sessionToken');\n    res.json({ message: 'Logged out successfully' });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get current user endpoint\napp.get('/api/auth/me', authenticateToken, (req: any, res) => {\n  const { password: _, ...userResponse } = req.user;\n  res.json({ user: userResponse });\n});\n\n// Clean up expired sessions (run periodically)\nsetInterval(async () => {\n  try {\n    await storage.deleteExpiredSessions();\n  } catch (error) {\n    console.error('Error cleaning up expired sessions:', error);\n  }\n}, 60 * 60 * 1000); // Run every hour\n\napp.listen(PORT, 'localhost', () => {\n  console.log(`Authentication server running on http://localhost:${PORT}`);\n});\n\nexport default app;","size_bytes":5808},"server/storage.ts":{"content":"import { users, sessions, type User, type InsertUser, type Session, type InsertSession } from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gt } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  createSession(insertSession: InsertSession): Promise<Session>;\n  getSessionByToken(token: string): Promise<Session & { user: User } | undefined>;\n  deleteSession(token: string): Promise<void>;\n  deleteExpiredSessions(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const [session] = await db\n      .insert(sessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getSessionByToken(token: string): Promise<Session & { user: User } | undefined> {\n    const result = await db\n      .select()\n      .from(sessions)\n      .innerJoin(users, eq(sessions.userId, users.id))\n      .where(and(\n        eq(sessions.token, token),\n        gt(sessions.expiresAt, new Date())\n      ))\n      .limit(1);\n\n    if (result.length === 0) {\n      return undefined;\n    }\n\n    const { sessions: session, users: user } = result[0];\n    return { ...session, user };\n  }\n\n  async deleteSession(token: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.token, token));\n  }\n\n  async deleteExpiredSessions(): Promise<void> {\n    await db.delete(sessions).where(gt(new Date(), sessions.expiresAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":2442},"shared/schema.ts":{"content":"import { pgTable, serial, varchar, text, timestamp, boolean, uuid } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  username: varchar('username', { length: 50 }).notNull().unique(),\n  email: varchar('email', { length: 100 }).notNull().unique(),\n  password: text('password').notNull(),\n  role: varchar('role', { length: 20 }).notNull().default('customer'),\n  approved: boolean('approved').notNull().default(true),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\nexport const sessions = pgTable('sessions', {\n  id: serial('id').primaryKey(),\n  token: uuid('token').notNull().unique().defaultRandom(),\n  userId: serial('user_id').notNull(),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  expiresAt: timestamp('expires_at').notNull(),\n  rememberMe: boolean('remember_me').notNull().default(false),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  sessions: many(sessions),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = typeof sessions.$inferInsert;","size_bytes":1396}},"version":1}